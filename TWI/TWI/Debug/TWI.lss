
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001c8a  00001cfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c8a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a98  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010db  00000000  00000000  000039b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000de4  00000000  00000000  00004a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00005870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000785  00000000  00000000  00005b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001006  00000000  00000000  000062e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000072eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 08 	jmp	0x106a	; 0x106a <__ctors_end>
       4:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
       8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
       c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      10:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      14:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      18:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      1c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      20:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      24:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      28:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      2c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      30:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      34:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      38:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      3c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      40:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      44:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      48:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      4c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      50:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      54:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      58:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      5c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      60:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      64:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      68:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      6c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      70:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      74:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      78:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      7c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      80:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      84:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      88:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      8c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      90:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      94:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      98:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      9c:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      a0:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      a4:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      a8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      ac:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      b0:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      b4:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      b8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      bc:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      c0:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      c4:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>
      c8:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__bad_interrupt>

000000cc <CONFIG>:
      cc:	3a 01 2a 04 28 00 29 00 20 00 21 00 22 00 23 00     :.*.(.). .!.".#.
      dc:	24 00 25 00 26 00 27 00 28 01 28 02 21 8f 28 03     $.%.&.'.(.(.!.(.
      ec:	21 00 28 04 28 05 28 06 28 07 28 08 28 09 28 0a     !.(.(.(.(.(.(.(.
      fc:	28 0b 28 0c 20 80 21 90 28 0d 20 00 21 00 28 0e     (.(. .!.(. .!.(.
     10c:	20 81 21 91 28 0f 20 00 21 92 28 10 21 00 28 11      .!.(. .!.(.!.(.
     11c:	21 93 28 12 21 00 28 13 28 14 28 15 20 82 28 16     !.(.!.(.(.(. .(.
     12c:	20 00 28 17 28 18 28 19 21 94 28 1a 21 95 28 1b      .(.(.(.!.(.!.(.
     13c:	21 96 28 1c 21 00 28 1d 20 83 28 1e 20 00 28 1f     !.(.!.(. .(. .(.
     14c:	21 97 28 20 21 00 28 21 28 22 28 23 28 24 28 25     !.( !.(!("(#($(%
     15c:	28 26 28 27 28 28 28 29 28 2a 20 84 28 2b 20 00     (&('((()(* .(+ .
     16c:	28 2c 28 2d 28 2e 28 2f 28 30 28 31 28 32 20 85     (,(-(.(/(0(1(2 .
     17c:	28 33 20 00 28 34 28 35 28 36 28 37 21 98 28 38     (3 .(4(5(6(7!.(8
     18c:	21 00 28 39 28 3a 28 3b 28 3c 28 3d 28 3e 28 3f     !.(9(:(;(<(=(>(?
     19c:	28 40 28 41 28 42 28 43 28 44 28 45 28 46 28 47     (@(A(B(C(D(E(F(G
     1ac:	28 48 28 49 28 4a 28 4b 28 4c 28 4d 28 4e 28 4f     (H(I(J(K(L(M(N(O
     1bc:	28 50 28 51 28 52 28 53 28 54 28 55 28 56 28 57     (P(Q(R(S(T(U(V(W
     1cc:	28 58 28 59 28 5a 28 5b 28 5c 28 5d 28 5e 28 5f     (X(Y(Z([(\(](^(_
     1dc:	28 60 28 61 28 62 21 99 28 63 21 00 28 64 28 65     (`(a(b!.(c!.(d(e
     1ec:	28 66 28 67 28 68 28 69 28 6a 28 6b 28 6c 28 6d     (f(g(h(i(j(k(l(m
     1fc:	28 6e 28 6f 28 70 28 71 28 72 28 73 28 74 28 75     (n(o(p(q(r(s(t(u
     20c:	28 76 28 77 28 78 28 79 28 7a 28 7b 28 7c 28 7d     (v(w(x(y(z({(|(}
     21c:	28 7e 28 7f 28 80 28 81 28 82 28 83 28 84 28 85     (~(.(.(.(.(.(.(.
     22c:	28 86 28 87 28 88 28 89 28 8a 28 8b 28 8c 28 8d     (.(.(.(.(.(.(.(.
     23c:	28 8e 28 8f 28 90 28 91 20 86 28 92 20 87 28 93     (.(.(.(. .(. .(.
     24c:	20 00 28 94 28 95 28 96 28 97 28 98 28 99 28 9a      .(.(.(.(.(.(.(.
     25c:	28 9b 28 9c 28 9d 28 9e 28 9f 21 9a 28 a0 21 00     (.(.(.(.(.!.(.!.
     26c:	28 a1 28 a2 28 a3 28 a4 28 a5 28 a6 28 a7 28 a8     (.(.(.(.(.(.(.(.
     27c:	28 a9 28 aa 28 ab 28 ac 28 ad 28 ae 28 af 28 b0     (.(.(.(.(.(.(.(.
     28c:	28 b1 28 b2 28 b3 28 b4 28 b5 28 b6 28 b7 28 b8     (.(.(.(.(.(.(.(.
     29c:	28 b9 20 88 28 ba 20 00 28 bb 20 89 28 bc 20 00     (. .(. .(. .(. .
     2ac:	28 bd 28 be 28 bf 28 c0 28 c1 28 c2 28 c3 21 9b     (.(.(.(.(.(.(.!.
     2bc:	28 c4 21 00 28 c5 28 c6 28 c7 28 c8 28 c9 28 ca     (.!.(.(.(.(.(.(.
     2cc:	28 cb 28 cc 28 cd 28 ce 28 cf 28 d0 28 d1 28 d2     (.(.(.(.(.(.(.(.
     2dc:	28 d3 28 d4 28 d5 28 d6 28 d7 28 d8 28 d9 28 da     (.(.(.(.(.(.(.(.
     2ec:	28 db 28 dc 28 dd 28 de 28 df 28 e0 28 e1 20 8a     (.(.(.(.(.(.(. .
     2fc:	28 e2 20 8b 28 e3 20 00 28 e4 28 e5 28 e6 28 e7     (. .(. .(.(.(.(.
     30c:	28 e8 28 e9 28 ea 28 eb 28 ec 28 ed 28 ee 28 ef     (.(.(.(.(.(.(.(.
     31c:	28 f0 28 f1 28 f2 28 f3 28 f4 28 f5 28 f6 28 f7     (.(.(.(.(.(.(.(.
     32c:	28 f8 20 8c 28 f9 20 00 21 9c 28 fa 21 9d 28 fb     (. .(. .!.(.!.(.
     33c:	20 8d 21 9e 28 fc 20 8e 21 9f 28 fd 20 00 21 00      .!.(. .!.(. .!.
     34c:	28 fe 28 ff 2a 01 28 00 22 01 23 95 24 89 25 07     (.(.*.(.".#.$.%.
     35c:	26 a4 27 07 28 01 21 c7 22 00 23 80 26 c4 27 0c     &.'.(.!.".#.&.'.
     36c:	28 02 20 09 21 1c 22 04 26 aa 27 0a 28 03 20 00     (. .!.".&.'.(. .
     37c:	21 00 22 00 23 a6 26 a0 27 07 28 04 28 05 20 05     !.".#.&.'.(.(. .
     38c:	23 84 26 b4 27 09 28 06 20 00 22 03 23 00 24 81     #.&.'.(. .".#.$.
     39c:	25 c0 26 ab 27 0a 28 07 21 ae 22 00 23 95 24 89     %.&.'.(.!.".#.$.
     3ac:	25 07 26 a4 27 00 28 08 21 48 22 01 23 80 26 c4     %.&.'.(.!H".#.&.
     3bc:	27 0c 28 09 20 09 21 04 22 04 26 aa 27 0a 28 0a     '.(. .!.".&.'.(.
     3cc:	20 00 21 00 22 00 23 a8 26 a4 27 07 28 0b 28 0c      .!.".#.&.'.(.(.
     3dc:	21 40 22 20 23 80 26 c4 27 0c 28 0d 22 24 26 c6     !@" #.&.'.(."$&.
     3ec:	28 0e 21 9e 22 00 26 c8 28 0f 20 09 21 02 22 14     (.!.".&.(. .!.".
     3fc:	26 aa 27 0a 28 10 20 05 21 00 22 00 23 84 26 b4     &.'.(. .!.".#.&.
     40c:	27 09 28 11 20 00 21 01 23 00 24 01 25 c0 26 ab     '.(. .!.#.$.%.&.
     41c:	27 0a 28 12 21 c3 23 95 24 89 25 07 26 20 27 00     '.(.!.#.$.%.& '.
     42c:	28 13 20 03 21 c2 23 83 26 26 27 0d 28 14 21 b3     (. .!.#.&&'.(.!.
     43c:	22 08 28 15 20 00 21 c6 22 00 23 95 26 00 27 08     ".(. .!.".#.&.'.
     44c:	28 16 21 00 23 00 24 96 25 03 26 aa 27 0a 28 17     (.!.#.$.%.&.'.(.
     45c:	20 42 21 b6 23 80 24 89 25 07 28 18 20 00 21 00      B!.#.$.%.(. .!.
     46c:	23 94 26 0e 28 19 20 0f 23 84 26 b4 27 09 28 1a     #.&.(. .#.&.'.(.
     47c:	20 00 23 93 26 a8 27 03 28 1b 26 28 27 00 28 1c      .#.&.'.(.&('.(.
     48c:	21 01 23 00 24 01 25 c0 26 ab 27 0a 28 1d 21 c5     !.#.$.%.&.'.(.!.
     49c:	23 95 24 89 25 07 26 20 27 00 28 1e 21 00 23 94     #.$.%.& '.(.!.#.
     4ac:	26 00 27 0a 28 1f 26 0e 28 20 20 03 21 79 22 01     &.'.(.&.(  .!y".
     4bc:	23 83 26 26 27 0d 28 21 21 32 28 22 20 00 21 04     #.&&'.(!!2(" .!.
     4cc:	22 00 23 80 24 00 25 fc 26 aa 27 0a 28 23 21 00     ".#.$.%.&.'.(#!.
     4dc:	23 00 25 00 28 24 21 a3 22 0d 23 80 24 9e 25 3b     #.%.($!.".#.$.%;
     4ec:	28 25 20 42 21 57 22 01 24 89 25 07 28 26 20 00     (% B!W".$.%.(& .
     4fc:	21 43 22 0d 24 00 25 38 28 27 21 08 22 98 23 95     !C".$.%8('!.".#.
     50c:	24 89 25 07 26 24 27 00 28 28 20 42 21 93 22 01     $.%.&$'.(( B!.".
     51c:	23 80 26 aa 27 0a 28 29 20 03 21 7e 22 04 23 83     #.&.'.() .!~".#.
     52c:	26 26 27 0d 28 2a 20 00 21 b0 22 00 23 95 26 a0     &&'.(* .!.".#.&.
     53c:	27 07 28 2b 21 00 23 00 24 0c 25 04 26 aa 27 0a     '.(+!.#.$.%.&.'.
     54c:	28 2c 21 02 23 80 24 86 25 c3 26 ab 28 2d 20 42     (,!.#.$.%.&.(- B
     55c:	21 97 22 01 24 89 25 07 26 aa 28 2e 20 00 21 00     !.".$.%.&.(. .!.
     56c:	22 00 24 1f 25 04 28 2f 21 b2 23 95 24 89 25 07     ".$.%.(/!.#.$.%.
     57c:	26 20 27 04 28 30 20 42 21 8b 22 04 23 80 26 aa     & '.(0 B!.".#.&.
     58c:	27 0a 28 31 20 00 21 b1 22 00 23 95 26 a0 27 07     '.(1 .!.".#.&.'.
     59c:	28 32 20 03 21 75 22 04 23 83 26 26 27 0d 28 33     (2 .!u".#.&&'.(3
     5ac:	20 05 21 00 22 00 23 84 26 b4 27 09 28 34 20 00      .!.".#.&.'.(4 .
     5bc:	21 60 23 00 24 01 25 c0 26 ab 27 0a 28 35 21 08     !`#.$.%.&.'.(5!.
     5cc:	22 98 23 95 24 89 25 07 26 24 27 00 28 36 21 bc     ".#.$.%.&$'.(6!.
     5dc:	22 00 28 37 21 a3 22 0d 23 00 24 01 25 c0 26 ab     ".(7!.".#.$.%.&.
     5ec:	27 0a 28 38 21 60 22 00 23 80 24 00 25 38 26 aa     '.(8!`".#.$.%8&.
     5fc:	28 39 21 06 22 98 23 95 24 89 25 07 26 24 27 00     (9!.".#.$.%.&$'.
     60c:	28 3a 21 be 22 00 28 3b 20 05 21 00 23 84 26 b4     (:!.".(; .!.#.&.
     61c:	27 09 28 3c 20 00 21 60 23 00 24 01 25 c0 26 ab     '.(< .!`#.$.%.&.
     62c:	27 0a 28 3d 21 42 22 01 23 95 24 89 25 07 26 24     '.(=!B".#.$.%.&$
     63c:	27 00 28 3e 21 0c 22 98 26 a4 27 07 28 3f 21 08     '.(>!.".&.'.(?!.
     64c:	28 40 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a     (@!`".#.$.%.&.'.
     65c:	28 41 21 0c 22 98 23 95 24 89 25 07 26 24 27 00     (A!.".#.$.%.&$'.
     66c:	28 42 20 05 21 00 22 00 23 84 26 b4 27 09 28 43     (B .!.".#.&.'.(C
     67c:	20 00 23 80 24 00 25 10 26 ab 27 0a 28 44 21 22      .#.$.%.&.'.(D!"
     68c:	22 01 23 95 24 89 25 07 26 24 27 00 28 45 21 00     ".#.$.%.&$'.(E!.
     69c:	22 00 23 00 24 04 25 12 26 aa 27 0a 28 46 20 03     ".#.$.%.&.'.(F .
     6ac:	21 d4 22 05 23 83 24 89 25 07 26 26 27 0d 28 47     !.".#.$.%.&&'.(G
     6bc:	20 00 21 60 22 00 23 00 24 01 25 c0 26 ab 27 0a      .!`".#.$.%.&.'.
     6cc:	28 48 21 b3 23 95 24 89 25 07 26 00 27 08 28 49     (H!.#.$.%.&.'.(I
     6dc:	21 00 23 00 24 09 25 00 26 aa 27 0a 28 4a 21 02     !.#.$.%.&.'.(J!.
     6ec:	23 80 24 86 25 3b 28 4b 20 42 21 dd 22 05 24 89     #.$.%;(K B!.".$.
     6fc:	25 07 28 4c 20 00 21 00 22 00 24 1f 25 00 28 4d     %.(L .!.".$.%.(M
     70c:	21 b3 23 95 24 89 25 07 26 20 27 00 28 4e 21 00     !.#.$.%.& '.(N!.
     71c:	23 00 24 97 25 03 26 aa 27 0a 28 4f 20 42 21 e2     #.$.%.&.'.(O B!.
     72c:	22 05 23 80 24 89 25 07 28 50 20 00 21 10 22 00     ".#.$.%.(P .!.".
     73c:	23 00 24 80 25 cc 26 ab 28 51 21 00 22 40 23 b4     #.$.%.&.(Q!."@#.
     74c:	24 89 25 07 26 aa 27 04 28 52 22 00 23 b0 26 92     $.%.&.'.(R".#.&.
     75c:	27 09 28 53 21 14 22 01 23 95 26 00 27 08 28 54     '.(S!.".#.&.'.(T
     76c:	21 48 23 a4 26 2a 27 00 28 55 21 00 22 00 23 00     !H#.&*'.(U!.".#.
     77c:	24 09 25 00 26 aa 27 0a 28 56 21 08 23 80 24 86     $.%.&.'.(V!.#.$.
     78c:	25 3b 28 57 20 42 21 11 22 07 24 89 25 07 28 58     %;(W B!.".$.%.(X
     79c:	20 00 21 00 22 00 24 1f 25 00 28 59 21 14 22 01      .!.".$.%.(Y!.".
     7ac:	23 95 24 89 25 07 26 20 27 00 28 5a 21 16 26 02     #.$.%.& '.(Z!.&.
     7bc:	27 09 28 5b 21 00 22 00 23 00 24 80 25 48 26 aa     '.([!.".#.$.%H&.
     7cc:	27 0a 28 5c 23 a0 24 89 25 07 26 14 27 09 28 5d     '.(\#.$.%.&.'.(]
     7dc:	24 80 25 50 26 a4 27 04 28 5e 21 16 22 01 23 95     $.%P&.'.(^!.".#.
     7ec:	24 89 25 07 27 00 28 5f 21 04 22 00 23 00 24 9c     $.%.'.(_!.".#.$.
     7fc:	25 78 26 aa 27 0a 28 60 21 43 22 0d 24 01 25 c4     %x&.'.(`!C".$.%.
     80c:	26 ab 28 61 21 03 22 00 24 15 28 62 21 00 24 00     &.(a!.".$.(b!.$.
     81c:	25 00 26 aa 28 63 21 5e 23 95 24 89 25 07 26 10     %.&.(c!^#.$.%.&.
     82c:	27 09 28 64 21 03 23 00 24 15 25 c4 26 ab 27 0a     '.(d!.#.$.%.&.'.
     83c:	28 65 21 00 23 80 24 00 25 06 26 aa 28 66 24 8f     (e!.#.$.%.&.(f$.
     84c:	25 e3 26 ab 28 67 20 42 21 cd 22 07 24 89 25 07     %.&.(g B!.".$.%.
     85c:	26 aa 28 68 20 00 21 60 22 00 23 00 24 01 25 c0     &.(h .!`".#.$.%.
     86c:	26 ab 28 69 21 00 23 80 24 8f 25 03 26 aa 28 6a     &.(i!.#.$.%.&.(j
     87c:	20 42 21 dd 22 07 24 89 25 07 28 6b 20 00 21 43      B!.".$.%.(k .!C
     88c:	22 0d 23 00 24 01 25 c0 26 ab 28 6c 21 00 22 00     ".#.$.%.&.(l!.".
     89c:	24 00 25 04 26 aa 28 6d 20 03 21 7f 22 01 23 83     $.%.&.(m .!.".#.
     8ac:	24 89 25 07 26 26 27 0d 28 6e 21 62 28 6f 20 05     $.%.&&'.(n!b(o .
     8bc:	21 00 22 00 23 84 26 b4 27 09 28 70 20 00 21 06     !.".#.&.'.(p .!.
     8cc:	23 95 26 00 27 08 28 71 21 01 23 00 24 97 25 3b     #.&.'.(q!.#.$.%;
     8dc:	26 aa 27 0a 28 72 20 42 21 0e 22 08 23 80 24 89     &.'.(r B!.".#.$.
     8ec:	25 07 28 73 20 03 21 3c 22 0b 23 83 26 26 27 0d     %.(s .!<".#.&&'.
     8fc:	28 74 20 00 21 03 22 00 23 95 26 02 27 08 28 75     (t .!.".#.&.'.(u
     90c:	21 27 23 00 24 81 25 c4 26 ab 27 0a 28 76 21 00     !'#.$.%.&.'.(v!.
     91c:	23 80 24 09 25 48 26 aa 28 77 21 58 22 34 23 a3     #.$.%H&.(w!X"4#.
     92c:	24 89 25 07 26 2a 27 00 28 78 21 00 22 00 23 a0     $.%.&*'.(x!.".#.
     93c:	26 00 27 09 28 79 21 07 23 80 24 03 25 39 26 aa     &.'.(y!.#.$.%9&.
     94c:	27 0a 28 7a 21 04 23 00 24 1c 25 38 28 7b 21 07     '.(z!.#.$.%8({!.
     95c:	23 80 24 83 25 39 28 7c 21 03 23 95 24 89 25 07     #.$.%9(|!.#.$.%.
     96c:	26 02 27 08 28 7d 21 27 23 00 24 81 25 c4 26 ab     &.'.(}!'#.$.%.&.
     97c:	27 0a 28 7e 21 00 23 80 24 09 25 48 26 aa 28 7f     '.(~!.#.$.%H&.(.
     98c:	21 58 22 34 23 a3 24 89 25 07 26 2a 27 00 28 80     !X"4#.$.%.&*'.(.
     99c:	21 06 22 00 23 00 24 81 25 c0 26 93 27 01 28 81     !.".#.$.%.&.'.(.
     9ac:	21 00 23 80 24 89 25 48 26 aa 27 0a 28 82 20 02     !.#.$.%H&.'.(. .
     9bc:	21 66 22 08 23 00 24 00 25 66 28 83 20 00 21 00     !f".#.$.%f(. .!.
     9cc:	22 00 23 80 24 1f 25 02 28 84 21 06 24 89 25 07     ".#.$.%.(.!.$.%.
     9dc:	26 dc 27 0c 28 85 21 00 23 aa 26 aa 27 0a 28 86     &.'.(.!.#.&.'.(.
     9ec:	23 b6 26 00 27 08 28 87 23 80 24 86 25 3b 26 aa     #.&.'.(.#.$.%;&.
     9fc:	27 0a 28 88 21 05 24 89 25 07 26 dc 27 0c 28 89     '.(.!.$.%.&.'.(.
     a0c:	21 00 23 aa 26 aa 27 0a 28 8a 23 b6 26 00 27 08     !.#.&.'.(.#.&.'.
     a1c:	28 8b 23 80 24 86 25 3b 26 aa 27 0a 28 8c 20 42     (.#.$.%;&.'.(. B
     a2c:	21 7b 22 08 24 89 25 07 28 8d 20 00 21 00 22 00     !{".$.%.(. .!.".
     a3c:	23 00 24 01 25 82 28 8e 21 05 24 81 25 c2 26 ab     #.$.%.(.!.$.%.&.
     a4c:	28 8f 20 03 21 93 22 08 23 83 24 89 25 07 26 26     (. .!.".#.$.%.&&
     a5c:	27 0d 28 90 20 00 21 05 22 00 23 00 24 81 25 c0     '.(. .!.".#.$.%.
     a6c:	26 13 27 01 28 91 21 00 23 80 24 89 25 48 26 aa     &.'.(.!.#.$.%H&.
     a7c:	27 0a 28 92 20 02 21 7e 22 08 23 00 24 00 25 66     '.(. .!~".#.$.%f
     a8c:	28 93 20 00 21 00 22 00 23 80 24 1f 25 02 28 94     (. .!.".#.$.%.(.
     a9c:	21 05 24 89 25 07 26 dc 27 0c 28 95 21 00 23 aa     !.$.%.&.'.(.!.#.
     aac:	26 aa 27 0a 28 96 23 b6 26 00 27 08 28 97 23 80     &.'.(.#.&.'.(.#.
     abc:	24 86 25 3b 26 aa 27 0a 28 98 21 05 24 89 25 07     $.%;&.'.(.!.$.%.
     acc:	26 dc 27 0c 28 99 21 00 23 aa 26 aa 27 0a 28 9a     &.'.(.!.#.&.'.(.
     adc:	23 80 24 1f 25 02 28 9b 21 01 23 00 24 81 25 c2     #.$.%.(.!.#.$.%.
     aec:	26 ab 28 9c 20 03 21 93 22 08 23 83 24 89 25 07     &.(. .!.".#.$.%.
     afc:	26 26 27 0d 28 9d 20 00 21 04 22 00 23 95 26 12     &&'.(. .!.".#.&.
     b0c:	27 08 28 9e 21 60 23 c4 26 aa 27 04 28 9f 21 00     '.(.!`#.&.'.(.!.
     b1c:	23 c0 26 00 27 09 28 a0 20 42 21 cb 22 08 23 80     #.&.'.(. B!.".#.
     b2c:	26 aa 27 0a 28 a1 20 70 21 54 22 b8 23 95 26 12     &.'.(. p!T".#.&.
     b3c:	27 08 28 a2 20 02 21 cc 22 08 23 80 26 aa 27 0a     '.(. .!.".#.&.'.
     b4c:	28 a3 20 03 21 ca 22 0f 23 83 26 26 27 0d 28 a4     (. .!.".#.&&'.(.
     b5c:	20 00 21 00 22 00 23 00 24 8c 25 0c 26 aa 27 0a      .!.".#.$.%.&.'.
     b6c:	28 a5 21 04 24 82 25 78 28 a6 21 00 23 80 24 89     (.!.$.%x(.!.#.$.
     b7c:	25 48 26 12 27 04 28 a7 20 03 21 de 22 0f 23 83     %H&.'.(. .!.".#.
     b8c:	25 07 26 26 27 0d 28 a8 20 00 21 01 22 00 23 00     %.&&'.(. .!.".#.
     b9c:	24 9c 25 78 26 aa 27 0a 28 a9 21 00 23 80 24 81     $.%x&.'.(.!.#.$.
     bac:	25 40 28 aa 20 03 21 cf 22 0f 23 83 24 89 25 07     %@(. .!.".#.$.%.
     bbc:	26 26 27 0d 28 ab 20 70 21 08 22 b8 23 95 26 a0     &&'.(. p!.".#.&.
     bcc:	27 04 28 ac 20 03 21 d4 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     bdc:	28 ad 21 27 22 0b 28 ae 20 70 21 63 22 b8 23 95     (.!'".(. p!c".#.
     bec:	26 12 27 08 28 af 20 00 21 01 22 00 23 80 24 86     &.'.(. .!.".#.$.
     bfc:	25 cb 26 ab 27 0a 28 b0 20 42 21 dd 22 08 24 89     %.&.'.(. B!.".$.
     c0c:	25 07 26 aa 28 b1 20 00 21 18 22 80 23 95 26 a4     %.&.(. .!.".#.&.
     c1c:	27 00 28 b2 20 03 21 d9 22 0f 23 83 26 26 27 0d     '.(. .!.".#.&&'.
     c2c:	28 b3 20 70 21 0a 22 b8 23 95 26 a0 27 00 28 b4     (. p!.".#.&.'.(.
     c3c:	20 02 21 e0 22 08 23 80 26 aa 27 0a 28 b5 20 70      .!.".#.&.'.(. p
     c4c:	21 0a 22 b8 23 95 26 a0 27 00 28 b6 21 54 26 02     !.".#.&.'.(.!T&.
     c5c:	27 08 28 b7 20 00 21 18 22 80 26 a4 27 00 28 b8     '.(. .!.".&.'.(.
     c6c:	21 00 22 00 23 80 24 80 25 48 26 aa 27 0a 28 b9     !.".#.$.%H&.'.(.
     c7c:	20 70 21 5e 22 b8 23 95 24 89 25 07 26 12 27 08      p!^".#.$.%.&.'.
     c8c:	28 ba 20 00 21 00 22 00 23 80 24 09 25 4b 26 aa     (. .!.".#.$.%K&.
     c9c:	27 0a 28 bb 20 70 21 5f 22 b8 23 95 24 89 25 07     '.(. p!_".#.$.%.
     cac:	26 10 27 08 28 bc 20 00 21 00 22 00 23 00 24 1c     &.'.(. .!.".#.$.
     cbc:	25 83 26 ab 27 0a 28 bd 20 03 21 32 22 09 23 83     %.&.'.(. .!2".#.
     ccc:	24 89 25 07 26 26 27 0d 28 be 20 00 21 00 22 00     $.%.&&'.(. .!.".
     cdc:	23 00 24 82 25 8c 26 ab 27 0a 28 bf 20 03 21 25     #.$.%.&.'.(. .!%
     cec:	22 09 23 83 24 89 25 07 26 26 27 0d 28 c0 20 42     ".#.$.%.&&'.(. B
     cfc:	21 bc 23 80 26 aa 27 0a 28 c1 20 00 21 01 22 00     !.#.&.'.(. .!.".
     d0c:	23 00 24 01 25 c0 26 ab 28 c2 20 70 21 0f 22 b8     #.$.%.&.(. p!.".
     d1c:	23 95 24 89 25 07 26 20 27 00 28 c3 20 03 21 e3     #.$.%.& '.(. .!.
     d2c:	22 0f 23 83 26 26 27 0d 28 c4 20 05 21 00 22 00     ".#.&&'.(. .!.".
     d3c:	23 84 26 b4 27 09 28 c5 20 00 21 03 23 95 26 14     #.&.'.(. .!.#.&.
     d4c:	27 08 28 c6 21 a6 23 a4 26 2a 27 05 28 c7 21 00     '.(.!.#.&*'.(.!.
     d5c:	23 a0 26 44 27 09 28 c8 21 18 22 6d 23 80 24 9e     #.&D'.(.!."m#.$.
     d6c:	25 7b 26 aa 27 0a 28 c9 20 42 21 13 22 0b 24 89     %{&.'.(. B!.".$.
     d7c:	25 07 28 ca 20 00 21 ae 22 00 23 95 26 24 27 00     %.(. .!.".#.&$'.
     d8c:	28 cb 21 00 22 03 23 80 24 87 25 7b 26 aa 27 0a     (.!.".#.$.%{&.'.
     d9c:	28 cc 20 42 21 16 22 0b 24 89 25 07 28 cd 20 00     (. B!.".$.%.(. .
     dac:	21 ae 22 00 23 95 26 24 27 00 28 ce 20 05 21 00     !.".#.&$'.(. .!.
     dbc:	23 84 26 b4 27 09 28 cf 20 03 21 0d 22 0b 23 83     #.&.'.(. .!.".#.
     dcc:	26 26 27 0d 28 d0 20 00 21 00 22 00 23 00 24 80     &&'.(. .!.".#.$.
     ddc:	26 02 27 00 28 d1 23 80 24 09 25 48 26 1e 28 d2     &.'.(.#.$.%H&.(.
     dec:	21 58 22 34 23 33 24 80 25 07 26 2a 28 d3 21 00     !X"4#3$.%.&*(.!.
     dfc:	22 00 23 00 26 80 27 10 28 d4 21 10 23 63 26 2a     ".#.&.'.(.!.#c&*
     e0c:	27 00 28 d5 21 00 23 60 26 a8 27 12 28 d6 21 af     '.(.!.#`&.'.(.!.
     e1c:	22 4c 23 00 26 c8 27 0c 28 d7 21 00 22 00 26 80     "L#.&.'.(.!.".&.
     e2c:	27 05 28 d8 23 80 24 86 25 3b 26 1e 27 00 28 d9     '.(.#.$.%;&.'.(.
     e3c:	20 42 21 1c 22 0e 23 00 24 80 25 07 28 da 20 00      B!.".#.$.%.(. .
     e4c:	21 35 22 29 26 c4 27 0c 28 db 20 02 21 1d 22 0e     !5")&.'.(. .!.".
     e5c:	26 1e 27 00 28 dc 20 00 21 7f 22 34 26 c4 27 0c     &.'.(. .!."4&.'.
     e6c:	28 dd 21 00 22 00 23 90 24 9f 25 04 26 10 27 0a     (.!.".#.$.%.&.'.
     e7c:	28 de 23 00 24 84 25 00 26 80 27 10 28 df 21 06     (.#.$.%.&.'.(.!.
     e8c:	23 63 24 80 25 07 26 2a 27 00 28 e0 21 00 23 80     #c$.%.&*'.(.!.#.
     e9c:	24 89 26 aa 27 0a 28 e1 20 05 23 84 26 b4 27 09     $.&.'.(. .#.&.'.
     eac:	28 e2 20 70 21 61 22 b8 23 95 26 12 27 08 28 e3     (. p!a".#.&.'.(.
     ebc:	20 00 21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a      .!.".#.$.%.&.'.
     ecc:	28 e4 20 42 21 ce 22 0f 24 89 25 07 26 aa 28 e5     (. B!.".$.%.&.(.
     edc:	20 70 21 50 22 b8 23 95 26 12 27 08 28 e6 20 05      p!P".#.&.'.(. .
     eec:	21 00 22 00 23 84 26 b4 27 09 28 e7 20 70 21 64     !.".#.&.'.(. p!d
     efc:	22 b8 23 95 26 12 27 08 28 e8 20 00 21 01 22 00     ".#.&.'.(. .!.".
     f0c:	23 80 24 86 25 c3 26 ab 27 0a 28 e9 20 42 21 d3     #.$.%.&.'.(. B!.
     f1c:	22 0f 24 89 25 07 26 aa 28 ea 20 70 21 51 22 b8     ".$.%.&.(. p!Q".
     f2c:	23 95 26 12 27 08 28 eb 20 05 21 00 22 00 23 84     #.&.'.(. .!.".#.
     f3c:	26 b4 27 09 28 ec 20 70 21 65 22 b8 23 95 26 12     &.'.(. p!e".#.&.
     f4c:	27 08 28 ed 20 00 21 01 22 00 23 80 24 86 25 c3     '.(. .!.".#.$.%.
     f5c:	26 ab 27 0a 28 ee 20 42 21 d8 22 0f 24 89 25 07     &.'.(. B!.".$.%.
     f6c:	26 aa 28 ef 20 70 21 52 22 b8 23 95 26 12 27 08     &.(. p!R".#.&.'.
     f7c:	28 f0 20 05 21 00 22 00 23 84 26 b4 27 09 28 f1     (. .!.".#.&.'.(.
     f8c:	20 70 21 61 22 b8 23 95 26 02 27 08 28 f2 20 00      p!a".#.&.'.(. .
     f9c:	21 01 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 f3     !.".#.$.%.&.'.(.
     fac:	20 42 21 dd 22 0f 24 89 25 07 26 aa 28 f4 20 70      B!.".$.%.&.(. p
     fbc:	21 50 22 b8 23 95 26 02 27 08 28 f5 20 05 21 00     !P".#.&.'.(. .!.
     fcc:	22 00 23 84 26 b4 27 09 28 f6 20 00 21 01 23 80     ".#.&.'.(. .!.#.
     fdc:	24 86 25 cb 26 ab 27 0a 28 f7 20 42 21 e1 22 0f     $.%.&.'.(. B!.".
     fec:	24 89 25 07 26 aa 28 f8 20 00 21 02 22 00 23 00     $.%.&.(. .!.".#.
     ffc:	24 81 25 c4 26 ab 28 f9 21 00 23 80 24 89 25 48     $.%.&.(.!.#.$.%H
    100c:	26 aa 28 fa 20 05 23 84 25 07 26 b4 27 09 28 fb     &.(. .#.%.&.'.(.
    101c:	20 70 21 4e 22 b8 23 95 26 10 27 08 28 fc 20 00      p!N".#.&.'.(. .
    102c:	21 00 22 00 23 80 24 86 25 c3 26 ab 27 0a 28 fd     !.".#.$.%.&.'.(.
    103c:	20 42 21 e7 22 0f 24 89 25 07 26 aa 28 fe 20 00      B!.".$.%.&.(. .
    104c:	21 bb 22 00 23 95 26 20 27 00 28 ff 20 05 21 00     !.".#.& '.(. .!.
    105c:	23 84 26 b4 27 09 2a 08 10 01 ff ff ff ff           #.&.'.*.......

0000106a <__ctors_end>:
    106a:	11 24       	eor	r1, r1
    106c:	1f be       	out	0x3f, r1	; 63
    106e:	cf ef       	ldi	r28, 0xFF	; 255
    1070:	d8 e0       	ldi	r29, 0x08	; 8
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	cd bf       	out	0x3d, r28	; 61

00001076 <__do_copy_data>:
    1076:	11 e0       	ldi	r17, 0x01	; 1
    1078:	a0 e0       	ldi	r26, 0x00	; 0
    107a:	b1 e0       	ldi	r27, 0x01	; 1
    107c:	ea e8       	ldi	r30, 0x8A	; 138
    107e:	fc e1       	ldi	r31, 0x1C	; 28
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <__do_copy_data+0x10>
    1082:	05 90       	lpm	r0, Z+
    1084:	0d 92       	st	X+, r0
    1086:	ac 32       	cpi	r26, 0x2C	; 44
    1088:	b1 07       	cpc	r27, r17
    108a:	d9 f7       	brne	.-10     	; 0x1082 <__do_copy_data+0xc>

0000108c <__do_clear_bss>:
    108c:	21 e0       	ldi	r18, 0x01	; 1
    108e:	ac e2       	ldi	r26, 0x2C	; 44
    1090:	b1 e0       	ldi	r27, 0x01	; 1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <.do_clear_bss_start>

00001094 <.do_clear_bss_loop>:
    1094:	1d 92       	st	X+, r1

00001096 <.do_clear_bss_start>:
    1096:	ac 32       	cpi	r26, 0x2C	; 44
    1098:	b2 07       	cpc	r27, r18
    109a:	e1 f7       	brne	.-8      	; 0x1094 <.do_clear_bss_loop>
    109c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <main>
    10a0:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <_exit>

000010a4 <__bad_interrupt>:
    10a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000010a8 <Output_Init>:
#include "Control_Outputs.h"

void Output_Init(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	//Set Port Pin to be an output with initial value '1'
	*(port_addr+1)|=(pin_mask);    // Set DDRx to make port pin an output
    10a8:	fc 01       	movw	r30, r24
    10aa:	21 81       	ldd	r18, Z+1	; 0x01
    10ac:	62 2b       	or	r22, r18
    10ae:	61 83       	std	Z+1, r22	; 0x01
    10b0:	08 95       	ret

000010b2 <Output_Set>:


void Output_Set(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	//control = 0, LED off; control = 1, LED on 
		*(port_addr+2)|=(pin_mask);    // Set PORTx PORTx pin to value of '1'
    10b2:	fc 01       	movw	r30, r24
    10b4:	22 81       	ldd	r18, Z+2	; 0x02
    10b6:	62 2b       	or	r22, r18
    10b8:	62 83       	std	Z+2, r22	; 0x02
    10ba:	08 95       	ret

000010bc <Output_Clear>:
}

void Output_Clear(uint8_t volatile * port_addr, uint8_t pin_mask)
{
    10bc:	fc 01       	movw	r30, r24
	//control = 0, LED off; control = 1, LED on
		*(port_addr+2)&=~(pin_mask);    // Clear PORTx pin to value of '0'
    10be:	92 81       	ldd	r25, Z+2	; 0x02
    10c0:	60 95       	com	r22
    10c2:	69 23       	and	r22, r25
    10c4:	62 83       	std	Z+2, r22	; 0x02
    10c6:	08 95       	ret

000010c8 <main>:
{
	extern const  uint8_t CONFIG[3998];
	extern const  uint8_t CONFIG2[50];
	uint8_t error_status;
	//initialize port c as output for UART
	Output_Init(&PC, 0x80);
    10c8:	60 e8       	ldi	r22, 0x80	; 128
    10ca:	86 e2       	ldi	r24, 0x26	; 38
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Output_Init>
	UART_init(&UART1,9600);
    10d2:	60 e8       	ldi	r22, 0x80	; 128
    10d4:	75 e2       	ldi	r23, 0x25	; 37
    10d6:	88 ec       	ldi	r24, 0xC8	; 200
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <UART_init>
	//not sure what output to set it to
    /* Replace with your application code */
	
	error_status = TWI_Master_Init(&TWI1, TWI_FREQ);
    10de:	48 ea       	ldi	r20, 0xA8	; 168
    10e0:	51 e6       	ldi	r21, 0x61	; 97
    10e2:	60 e0       	ldi	r22, 0x00	; 0
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	88 ed       	ldi	r24, 0xD8	; 216
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <TWI_Master_Init>
	if(error_status == no_errors)
    10ee:	81 11       	cpse	r24, r1
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <main+0x2e>
	{
		transmit_receive_debug();
    10f2:	0e 94 7e 08 	call	0x10fc	; 0x10fc <transmit_receive_debug>
	}
	
	write_STA();
    10f6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <write_STA>
    10fa:	ff cf       	rjmp	.-2      	; 0x10fa <main+0x32>

000010fc <transmit_receive_debug>:
#include "TWI_debug.h"
#include "TWI_funcs.h"

void transmit_receive_debug()
{
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	e2 97       	sbiw	r28, 0x32	; 50
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
  uint8_t timeout_value = 10;
  uint8_t index=timeout_value;
  uint8_t error_status;
  uint8_t prnt_buffer [40];
  uint8_t array_name[10];
  array_name[0] = 0x05;
    111c:	85 e0       	ldi	r24, 0x05	; 5
    111e:	89 a7       	std	Y+41, r24	; 0x29
#include "TWI_funcs.h"

void transmit_receive_debug()
{
  uint8_t timeout_value = 10;
  uint8_t index=timeout_value;
    1120:	1a e0       	ldi	r17, 0x0A	; 10
  array_name[0] = 0x05;

  do
  {
	 
    error_status=TWI_Master_Transmit(&TWI1, 0x43, 0x01,1, 0,array_name);
    1122:	ce 01       	movw	r24, r28
    1124:	89 96       	adiw	r24, 0x29	; 41
    1126:	6c 01       	movw	r12, r24
    1128:	e1 2c       	mov	r14, r1
    112a:	f1 2c       	mov	r15, r1
    112c:	01 e0       	ldi	r16, 0x01	; 1
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	63 e4       	ldi	r22, 0x43	; 67
    1138:	88 ed       	ldi	r24, 0xD8	; 216
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <TWI_Master_Transmit>
    index--;
    1140:	11 50       	subi	r17, 0x01	; 1
  }while((error_status!=no_errors)&&(index!=0));
    1142:	88 23       	and	r24, r24
    1144:	11 f0       	breq	.+4      	; 0x114a <transmit_receive_debug+0x4e>
    1146:	11 11       	cpse	r17, r1
    1148:	ec cf       	rjmp	.-40     	; 0x1122 <transmit_receive_debug+0x26>
  //If receive only has one value to read, it is repeatedly printed out. It's the 
  //correct value but something is wrong for it to loop like that
  do
  {
     //this is for first try, with receive by itself
     error_status = TWI_Master_Receive(&TWI1, 0x43, 0x01, 1 , 1, array_name);
    114a:	ce 01       	movw	r24, r28
    114c:	89 96       	adiw	r24, 0x29	; 41
    114e:	6c 01       	movw	r12, r24
    1150:	ee 24       	eor	r14, r14
    1152:	e3 94       	inc	r14
    1154:	f1 2c       	mov	r15, r1
    1156:	01 e0       	ldi	r16, 0x01	; 1
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	63 e4       	ldi	r22, 0x43	; 67
    1162:	88 ed       	ldi	r24, 0xD8	; 216
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <TWI_Master_Receive>
     //for try with transmit running first
     //error_status = TWI_Master_Receive(&TWI1, 0x43, 0 ,0 ,1,array_name);
     index--;
    116a:	11 50       	subi	r17, 0x01	; 1
  }while((error_status!=no_errors)&&(index!=0));
    116c:	88 23       	and	r24, r24
    116e:	11 f0       	breq	.+4      	; 0x1174 <transmit_receive_debug+0x78>
    1170:	11 11       	cpse	r17, r1
    1172:	eb cf       	rjmp	.-42     	; 0x114a <transmit_receive_debug+0x4e>

  sprintf(prnt_buffer, "received value = %2.2X\n\r", array_name[0]);
    1174:	89 a5       	ldd	r24, Y+41	; 0x29
    1176:	1f 92       	push	r1
    1178:	8f 93       	push	r24
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	9f 93       	push	r25
    1180:	8f 93       	push	r24
    1182:	8e 01       	movw	r16, r28
    1184:	0f 5f       	subi	r16, 0xFF	; 255
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	1f 93       	push	r17
    118a:	0f 93       	push	r16
    118c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <sprintf>
  //sprintf(prnt_buffer, "received value = %2.2X\n\r", array_name[0]);
  UART_Transmit_String(&UART1,0,prnt_buffer); 
    1190:	a8 01       	movw	r20, r16
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Transmit_String>
  //return;
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	e2 96       	adiw	r28, 0x32	; 50
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret

000011c6 <send_start>:
	}
	
	else
	{
		//DAta byte will be received and ACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(1<<TWEA)|(1<<TWEN));
    11c6:	fc 01       	movw	r30, r24
    11c8:	84 ea       	ldi	r24, 0xA4	; 164
    11ca:	84 83       	std	Z+4, r24	; 0x04
    11cc:	94 81       	ldd	r25, Z+4	; 0x04
    11ce:	99 23       	and	r25, r25
    11d0:	ec f7       	brge	.-6      	; 0x11cc <send_start+0x6>
    11d2:	08 95       	ret

000011d4 <TWI_Master_Init>:
	}
}

//set twi clock frequency,
uint8_t TWI_Master_Init(uint8_t volatile *TWI_addr, uint32_t I2C_freq)
{	
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
    11e4:	6a 01       	movw	r12, r20
    11e6:	7b 01       	movw	r14, r22
	//reset pin here for clean slate before init
	Output_Init(&PB,0x02);
    11e8:	62 e0       	ldi	r22, 0x02	; 2
    11ea:	83 e2       	ldi	r24, 0x23	; 35
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Output_Init>
	Output_Clear(&PB,0x02);
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	83 e2       	ldi	r24, 0x23	; 35
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <Output_Clear>
	Output_Set(&PB,0x02);
    11fc:	62 e0       	ldi	r22, 0x02	; 2
    11fe:	83 e2       	ldi	r24, 0x23	; 35
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Output_Set>
	
	
	uint8_t return_value = no_errors;
	uint8_t prescale_value = (((F_CPU/F_DIV)/(uint32_t)(I2C_freq))-16UL)/(2UL*255);
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	74 e2       	ldi	r23, 0x24	; 36
    120a:	84 ef       	ldi	r24, 0xF4	; 244
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a7 01       	movw	r20, r14
    1210:	96 01       	movw	r18, r12
    1212:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodsi4>
    1216:	69 01       	movw	r12, r18
    1218:	7a 01       	movw	r14, r20
    121a:	80 e1       	ldi	r24, 0x10	; 16
    121c:	c8 1a       	sub	r12, r24
    121e:	d1 08       	sbc	r13, r1
    1220:	e1 08       	sbc	r14, r1
    1222:	f1 08       	sbc	r15, r1
    1224:	c7 01       	movw	r24, r14
    1226:	b6 01       	movw	r22, r12
    1228:	2e ef       	ldi	r18, 0xFE	; 254
    122a:	31 e0       	ldi	r19, 0x01	; 1
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodsi4>
	
	// setting the status register
	if(prescale_value<1)
    1234:	21 11       	cpse	r18, r1
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <TWI_Master_Init+0x6c>
	{
		*(TWI_addr + TWSR) = PRESCALE_1;
    1238:	19 82       	std	Y+1, r1	; 0x01
		prescale_value=1;
    123a:	21 e0       	ldi	r18, 0x01	; 1
	Output_Init(&PB,0x02);
	Output_Clear(&PB,0x02);
	Output_Set(&PB,0x02);
	
	
	uint8_t return_value = no_errors;
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	16 c0       	rjmp	.+44     	; 0x126c <TWI_Master_Init+0x98>
	{
		*(TWI_addr + TWSR) = PRESCALE_1;
		prescale_value=1;
	}
	
	else if(prescale_value<4)
    1240:	24 30       	cpi	r18, 0x04	; 4
    1242:	28 f4       	brcc	.+10     	; 0x124e <TWI_Master_Init+0x7a>
	{
		*(TWI_addr + TWSR) = PRESCALE_4;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
		prescale_value = 4;
    1248:	24 e0       	ldi	r18, 0x04	; 4
	Output_Init(&PB,0x02);
	Output_Clear(&PB,0x02);
	Output_Set(&PB,0x02);
	
	
	uint8_t return_value = no_errors;
    124a:	10 e0       	ldi	r17, 0x00	; 0
    124c:	0f c0       	rjmp	.+30     	; 0x126c <TWI_Master_Init+0x98>
	{
		*(TWI_addr + TWSR) = PRESCALE_4;
		prescale_value = 4;
	}
	
	else if(prescale_value<16)
    124e:	20 31       	cpi	r18, 0x10	; 16
    1250:	28 f4       	brcc	.+10     	; 0x125c <TWI_Master_Init+0x88>
	{
		*(TWI_addr + TWSR) = PRESCALE_16;
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	89 83       	std	Y+1, r24	; 0x01
		prescale_value = 16;
    1256:	20 e1       	ldi	r18, 0x10	; 16
	Output_Init(&PB,0x02);
	Output_Clear(&PB,0x02);
	Output_Set(&PB,0x02);
	
	
	uint8_t return_value = no_errors;
    1258:	10 e0       	ldi	r17, 0x00	; 0
    125a:	08 c0       	rjmp	.+16     	; 0x126c <TWI_Master_Init+0x98>
	{
		*(TWI_addr + TWSR) = PRESCALE_16;
		prescale_value = 16;
	}
	
	else if(prescale_value<64)
    125c:	20 34       	cpi	r18, 0x40	; 64
    125e:	28 f4       	brcc	.+10     	; 0x126a <TWI_Master_Init+0x96>
	{
		*(TWI_addr + TWSR) = PRESCALE_64;
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	89 83       	std	Y+1, r24	; 0x01
		prescale_value = 64;
    1264:	20 e4       	ldi	r18, 0x40	; 64
	Output_Init(&PB,0x02);
	Output_Clear(&PB,0x02);
	Output_Set(&PB,0x02);
	
	
	uint8_t return_value = no_errors;
    1266:	10 e0       	ldi	r17, 0x00	; 0
    1268:	01 c0       	rjmp	.+2      	; 0x126c <TWI_Master_Init+0x98>
		prescale_value = 64;
	}

	//if prescale is higher return error value to then reenter?
	else
		return_value = prescaler_size_error;
    126a:	18 e0       	ldi	r17, 0x08	; 8
	//same for twbr
	uint16_t TWBR_value = (((F_CPU/F_DIV)/(uint32_t)(I2C_freq))-16UL)/(2UL*prescale_value);
    126c:	82 2f       	mov	r24, r18
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	ad 01       	movw	r20, r26
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	44 1f       	adc	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	c7 01       	movw	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodsi4>
	
	//since TWBR register is a 8-bit register thus max val is 255
	if(TWBR_value<256)
    1288:	2f 3f       	cpi	r18, 0xFF	; 255
    128a:	31 05       	cpc	r19, r1
    128c:	09 f0       	breq	.+2      	; 0x1290 <TWI_Master_Init+0xbc>
    128e:	08 f4       	brcc	.+2      	; 0x1292 <TWI_Master_Init+0xbe>
	{
		*(TWI_addr + TWBR) = ((uint8_t)TWBR_value);
    1290:	28 83       	st	Y, r18
	}
	return return_value;
}
    1292:	81 2f       	mov	r24, r17
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	08 95       	ret

000012a4 <TWI_Master_Transmit>:


uint8_t TWI_Master_Transmit(uint8_t volatile *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t * array_name)
{
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	ec 01       	movw	r28, r24
    12c6:	16 2f       	mov	r17, r22
    12c8:	49 01       	movw	r8, r18
    12ca:	5a 01       	movw	r10, r20
	uint8_t temp8;
	
	//Address + 0lsb, SLA+W
	send_value=(device_addr<<1);
	
	send_start(TWI_addr);
    12cc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <send_start>
	
	//read status to see what we need to do next
	//clear lower three bits
	temp8=(*(TWI_addr+TWSR)&0xF8);
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	88 7f       	andi	r24, 0xF8	; 248
	
	//start sent
	if(temp8 == 0x08 || temp8 == 0x10)
    12d4:	88 30       	cpi	r24, 0x08	; 8
    12d6:	19 f0       	breq	.+6      	; 0x12de <TWI_Master_Transmit+0x3a>
    12d8:	80 31       	cpi	r24, 0x10	; 16
    12da:	09 f0       	breq	.+2      	; 0x12de <TWI_Master_Transmit+0x3a>
    12dc:	6a c0       	rjmp	.+212    	; 0x13b2 <TWI_Master_Transmit+0x10e>
	uint8_t send_value;
	uint8_t status;
	uint8_t temp8;
	
	//Address + 0lsb, SLA+W
	send_value=(device_addr<<1);
    12de:	11 0f       	add	r17, r17
	temp8=(*(TWI_addr+TWSR)&0xF8);
	
	//start sent
	if(temp8 == 0x08 || temp8 == 0x10)
	{
		*(TWI_addr+TWDR)=send_value;
    12e0:	1b 83       	std	Y+3, r17	; 0x03
		*(TWI_addr+TWCR)=((1<<TWINT)|(1<<TWEN));
    12e2:	84 e8       	ldi	r24, 0x84	; 132
    12e4:	8c 83       	std	Y+4, r24	; 0x04
		
		do
		{
			status=*(TWI_addr+TWCR);
    12e6:	8c 81       	ldd	r24, Y+4	; 0x04
		}while((status & (1 << TWINT)) == 0);
    12e8:	88 23       	and	r24, r24
    12ea:	ec f7       	brge	.-6      	; 0x12e6 <TWI_Master_Transmit+0x42>
		
		//Status register with bottom three bits cleared
		temp8 = (*(TWI_addr + TWSR) & 0xF8);
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 e0       	ldi	r24, 0x00	; 0
					int_addr_sz--;
					
				}
				
				*(TWI_addr+TWDR)=send_value;
				*(TWI_addr+TWCR)=((1<<TWINT)|(1<<TWEN));
    12f2:	94 e8       	ldi	r25, 0x84	; 132
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    12f4:	44 e9       	ldi	r20, 0x94	; 148
	
	//wait for stop bit to be cleared, indicating top condition is executed on bus
	do
	{
		status = *(TWI_addr + TWCR);
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
			
			//Arbitration lost in SLA+W or data bytes
			else if (temp8 == 0x38)
			{
				//release bus and enter slave mode
				*(TWI_addr + TWCR) = (1<<TWINT);
    12fa:	60 e8       	ldi	r22, 0x80	; 128
				return_value = transmit_arbitration;
    12fc:	5a e0       	ldi	r21, 0x0A	; 10
			
			//Data sent and NACK received
			else if(temp8 == 0x30)
			{
				send_stop(TWI_addr);
				return_value = data_sent_NACK;
    12fe:	19 e0       	ldi	r17, 0x09	; 9
			
			//SLA+W sent, NACK received
			else if (temp8 == 0x20)
			{
				send_stop(TWI_addr);
				return_value = SLA_W_NACK;
    1300:	77 e0       	ldi	r23, 0x07	; 7
    1302:	4e c0       	rjmp	.+156    	; 0x13a0 <TWI_Master_Transmit+0xfc>
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    1304:	77 24       	eor	r7, r7
    1306:	73 94       	inc	r7
    1308:	7f 0e       	add	r7, r31
			num_bytes--;
    130a:	97 01       	movw	r18, r14
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	31 09       	sbc	r19, r1
			
			//wait until TWINT is set to send again
			do
			{
				status =* (TWI_addr + TWCR);
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
			}while((status & (1<<TWINT)) == 0);
    1312:	ee 23       	and	r30, r30
    1314:	ec f7       	brge	.-6      	; 0x1310 <TWI_Master_Transmit+0x6c>
			//clear lower three bits
			temp8=(*(TWI_addr + TWSR) & 0xF8);
    1316:	e9 81       	ldd	r30, Y+1	; 0x01
    1318:	e8 7f       	andi	r30, 0xF8	; 248
			//read status and see what to do next
			
			//SLA+W sent and ACK received OR data sent and ACK received
			if(temp8 == 0x18 || temp8 == 0x28)
    131a:	e8 31       	cpi	r30, 0x18	; 24
    131c:	11 f0       	breq	.+4      	; 0x1322 <TWI_Master_Transmit+0x7e>
    131e:	e8 32       	cpi	r30, 0x28	; 40
    1320:	31 f5       	brne	.+76     	; 0x136e <TWI_Master_Transmit+0xca>
			{
				if(int_addr_sz > 0)
    1322:	00 23       	and	r16, r16
    1324:	09 f4       	brne	.+2      	; 0x1328 <TWI_Master_Transmit+0x84>
    1326:	47 c0       	rjmp	.+142    	; 0x13b6 <TWI_Master_Transmit+0x112>
				{
					//Shift 8 bytes if size 2 and no bytes if size 1
					//Casting as uint8_t will select 8 rightmost bits
					send_value = (uint8_t)(int_addr >> ((int_addr_sz - 1) * 8));
    1328:	20 2f       	mov	r18, r16
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	31 09       	sbc	r19, r1
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	24 01       	movw	r4, r8
    133e:	35 01       	movw	r6, r10
    1340:	04 c0       	rjmp	.+8      	; 0x134a <TWI_Master_Transmit+0xa6>
    1342:	76 94       	lsr	r7
    1344:	67 94       	ror	r6
    1346:	57 94       	ror	r5
    1348:	47 94       	ror	r4
    134a:	2a 95       	dec	r18
    134c:	d2 f7       	brpl	.-12     	; 0x1342 <TWI_Master_Transmit+0x9e>
					
					//Increment num_bytes and decrement index because nothing was read from array this loop
					num_bytes++;
					index--;
					int_addr_sz--;
    134e:	01 50       	subi	r16, 0x01	; 1
					
				}
				
				*(TWI_addr+TWDR)=send_value;
    1350:	4b 82       	std	Y+3, r4	; 0x03
				*(TWI_addr+TWCR)=((1<<TWINT)|(1<<TWEN));
    1352:	9c 83       	std	Y+4, r25	; 0x04
				
				if((num_bytes == 0) && (int_addr_sz == 0))
    1354:	e1 14       	cp	r14, r1
    1356:	f1 04       	cpc	r15, r1
    1358:	19 f5       	brne	.+70     	; 0x13a0 <TWI_Master_Transmit+0xfc>
    135a:	01 11       	cpse	r16, r1
    135c:	21 c0       	rjmp	.+66     	; 0x13a0 <TWI_Master_Transmit+0xfc>
					//Casting as uint8_t will select 8 rightmost bits
					send_value = (uint8_t)(int_addr >> ((int_addr_sz - 1) * 8));
					
					//Increment num_bytes and decrement index because nothing was read from array this loop
					num_bytes++;
					index--;
    135e:	7f 2e       	mov	r7, r31
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    1360:	4c 83       	std	Y+4, r20	; 0x04
	
	//wait for stop bit to be cleared, indicating top condition is executed on bus
	do
	{
		status = *(TWI_addr + TWCR);
    1362:	2c 81       	ldd	r18, Y+4	; 0x04
    1364:	f7 2d       	mov	r31, r7
    1366:	eb 2e       	mov	r14, r27
    1368:	fa 2e       	mov	r15, r26
    136a:	00 e0       	ldi	r16, 0x00	; 0
    136c:	19 c0       	rjmp	.+50     	; 0x13a0 <TWI_Master_Transmit+0xfc>
				}
				
			}
			
			//SLA+W sent, NACK received
			else if (temp8 == 0x20)
    136e:	e0 32       	cpi	r30, 0x20	; 32
    1370:	31 f4       	brne	.+12     	; 0x137e <TWI_Master_Transmit+0xda>
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    1372:	4c 83       	std	Y+4, r20	; 0x04
	
	//wait for stop bit to be cleared, indicating top condition is executed on bus
	do
	{
		status = *(TWI_addr + TWCR);
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    1376:	f7 2d       	mov	r31, r7
			num_bytes--;
    1378:	79 01       	movw	r14, r18
			
			//SLA+W sent, NACK received
			else if (temp8 == 0x20)
			{
				send_stop(TWI_addr);
				return_value = SLA_W_NACK;
    137a:	87 2f       	mov	r24, r23
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <TWI_Master_Transmit+0xfc>
			}
			
			//Data sent and NACK received
			else if(temp8 == 0x30)
    137e:	e0 33       	cpi	r30, 0x30	; 48
    1380:	31 f4       	brne	.+12     	; 0x138e <TWI_Master_Transmit+0xea>
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    1382:	4c 83       	std	Y+4, r20	; 0x04
	
	//wait for stop bit to be cleared, indicating top condition is executed on bus
	do
	{
		status = *(TWI_addr + TWCR);
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    1386:	f7 2d       	mov	r31, r7
			num_bytes--;
    1388:	79 01       	movw	r14, r18
			
			//Data sent and NACK received
			else if(temp8 == 0x30)
			{
				send_stop(TWI_addr);
				return_value = data_sent_NACK;
    138a:	81 2f       	mov	r24, r17
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <TWI_Master_Transmit+0xfc>
			}
			
			//Arbitration lost in SLA+W or data bytes
			else if (temp8 == 0x38)
    138e:	e8 33       	cpi	r30, 0x38	; 56
    1390:	29 f4       	brne	.+10     	; 0x139c <TWI_Master_Transmit+0xf8>
			{
				//release bus and enter slave mode
				*(TWI_addr + TWCR) = (1<<TWINT);
    1392:	6c 83       	std	Y+4, r22	; 0x04
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    1394:	f7 2d       	mov	r31, r7
			num_bytes--;
    1396:	79 01       	movw	r14, r18
			//Arbitration lost in SLA+W or data bytes
			else if (temp8 == 0x38)
			{
				//release bus and enter slave mode
				*(TWI_addr + TWCR) = (1<<TWINT);
				return_value = transmit_arbitration;
    1398:	85 2f       	mov	r24, r21
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <TWI_Master_Transmit+0xfc>
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    139c:	f7 2d       	mov	r31, r7
			num_bytes--;
    139e:	79 01       	movw	r14, r18
	}
	//if no errors send data bytes until all sent
	if(return_value == no_errors)
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
    13a0:	e1 14       	cp	r14, r1
    13a2:	f1 04       	cpc	r15, r1
    13a4:	19 f0       	breq	.+6      	; 0x13ac <TWI_Master_Transmit+0x108>
    13a6:	88 23       	and	r24, r24
    13a8:	09 f4       	brne	.+2      	; 0x13ac <TWI_Master_Transmit+0x108>
    13aa:	ac cf       	rjmp	.-168    	; 0x1304 <TWI_Master_Transmit+0x60>
    13ac:	01 11       	cpse	r16, r1
    13ae:	aa cf       	rjmp	.-172    	; 0x1304 <TWI_Master_Transmit+0x60>
    13b0:	0f c0       	rjmp	.+30     	; 0x13d0 <TWI_Master_Transmit+0x12c>
		temp8 = (*(TWI_addr + TWSR) & 0xF8);
	}
	
	else
	{
		return_value = start_error;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
				return_value = transmit_arbitration;
			}
			
		}
	}
	return return_value;
    13b4:	0d c0       	rjmp	.+26     	; 0x13d0 <TWI_Master_Transmit+0x12c>
	if(return_value == no_errors)
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
    13b6:	76 01       	movw	r14, r12
    13b8:	ef 0e       	add	r14, r31
    13ba:	f1 1c       	adc	r15, r1
    13bc:	f7 01       	movw	r30, r14
    13be:	e0 81       	ld	r30, Z
					index--;
					int_addr_sz--;
					
				}
				
				*(TWI_addr+TWDR)=send_value;
    13c0:	eb 83       	std	Y+3, r30	; 0x03
				*(TWI_addr+TWCR)=((1<<TWINT)|(1<<TWEN));
    13c2:	9c 83       	std	Y+4, r25	; 0x04
				
				if((num_bytes == 0) && (int_addr_sz == 0))
    13c4:	21 15       	cp	r18, r1
    13c6:	31 05       	cpc	r19, r1
    13c8:	59 f2       	breq	.-106    	; 0x1360 <TWI_Master_Transmit+0xbc>
	{
		uint8_t index=0;
		while(((num_bytes != 0) && (return_value == no_errors)) || (int_addr_sz!= 0))
		{
			send_value=array_name[index];
			index++;
    13ca:	f7 2d       	mov	r31, r7
			num_bytes--;
    13cc:	79 01       	movw	r14, r18
    13ce:	e8 cf       	rjmp	.-48     	; 0x13a0 <TWI_Master_Transmit+0xfc>
			}
			
		}
	}
	return return_value;
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	5f 90       	pop	r5
    13ee:	4f 90       	pop	r4
    13f0:	08 95       	ret

000013f2 <TWI_Master_Receive>:

uint8_t TWI_Master_Receive(uint8_t volatile *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t * array_name)
{
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
	uint8_t return_value = no_errors;
	uint8_t status;
	uint8_t send_value=(device_addr<<1)|0x01; //set lsb to 1
    1402:	66 0f       	add	r22, r22
    1404:	16 2f       	mov	r17, r22
    1406:	11 60       	ori	r17, 0x01	; 1
		i--;
	}while((return_value!=no_errors)&&(i!=0));
	 */
	 
	
	send_start(TWI_addr);
    1408:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <send_start>
	
	// clear bottom three bits
	uint8_t temp8=(*(TWI_addr + TWSR) & 0xF8);
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	88 7f       	andi	r24, 0xF8	; 248
	
	//start or repeated start has been sent
	if((temp8 == 0x08)||(temp8 == 0x10))
    1410:	88 30       	cpi	r24, 0x08	; 8
    1412:	19 f0       	breq	.+6      	; 0x141a <TWI_Master_Receive+0x28>
    1414:	80 31       	cpi	r24, 0x10	; 16
    1416:	09 f0       	breq	.+2      	; 0x141a <TWI_Master_Receive+0x28>
    1418:	40 c0       	rjmp	.+128    	; 0x149a <TWI_Master_Receive+0xa8>
	{
		//send the device addr we want to read from and a 1 for 'read'
		*(TWI_addr+TWDR) = send_value;
    141a:	1b 83       	std	Y+3, r17	; 0x03
		*(TWI_addr+TWCR) = ((1<<TWINT)|(1<<TWEN));
    141c:	84 e8       	ldi	r24, 0x84	; 132
    141e:	8c 83       	std	Y+4, r24	; 0x04
		//wait till we get response
		do
		{
			status=*(TWI_addr+TWCR);
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
		}while((status & (1 << TWINT)) == 0);
    1422:	88 23       	and	r24, r24
    1424:	ec f7       	brge	.-6      	; 0x1420 <TWI_Master_Receive+0x2e>
		//write to temp8
		temp8=(*(TWI_addr + TWSR) & 0xF8);
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	88 7f       	andi	r24, 0xF8	; 248
		return_value = start_error; 
	}
	
	if(return_value == no_errors)
	{
		while((num_bytes > 0) && (return_value == no_errors))
    142a:	e1 14       	cp	r14, r1
    142c:	f1 04       	cpc	r15, r1
    142e:	b9 f1       	breq	.+110    	; 0x149e <TWI_Master_Receive+0xac>
    1430:	90 e0       	ldi	r25, 0x00	; 0
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    1432:	34 e9       	ldi	r19, 0x94	; 148
	}
	
	else
	{
		//DAta byte will be received and ACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(1<<TWEA)|(1<<TWEN));
    1434:	24 ec       	ldi	r18, 0xC4	; 196
void handle_one_byte(uint8_t bytes_left, uint8_t volatile * TWI_addr)
{
	if(bytes_left == 1)
	{
		//Data byte will be received and NACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(0<<TWEA)|(1<<TWEN));
    1436:	44 e8       	ldi	r20, 0x84	; 132
	{
		while((num_bytes > 0) && (return_value == no_errors))
		{	
			
			//SLA+R sent and ACK received
			if(temp8 == 0x40)
    1438:	80 34       	cpi	r24, 0x40	; 64
    143a:	39 f4       	brne	.+14     	; 0x144a <TWI_Master_Receive+0x58>
}

//helper to act if one byte is left to receive
void handle_one_byte(uint8_t bytes_left, uint8_t volatile * TWI_addr)
{
	if(bytes_left == 1)
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	e8 12       	cpse	r14, r24
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <TWI_Master_Receive+0x54>
	{
		//Data byte will be received and NACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(0<<TWEA)|(1<<TWEN));
    1442:	4c 83       	std	Y+4, r20	; 0x04
    1444:	21 c0       	rjmp	.+66     	; 0x1488 <TWI_Master_Receive+0x96>
	}
	
	else
	{
		//DAta byte will be received and ACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(1<<TWEA)|(1<<TWEN));
    1446:	2c 83       	std	Y+4, r18	; 0x04
    1448:	1f c0       	rjmp	.+62     	; 0x1488 <TWI_Master_Receive+0x96>
			{
				handle_one_byte(num_bytes, TWI_addr);
			}
			
			//Data byte has been received and ACK has been returned
			else if(temp8 == 0x50)
    144a:	80 35       	cpi	r24, 0x50	; 80
    144c:	81 f4       	brne	.+32     	; 0x146e <TWI_Master_Receive+0x7c>
			{
				array_name[index] = *(TWI_addr +TWDR);
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	f6 01       	movw	r30, r12
    1452:	e9 0f       	add	r30, r25
    1454:	f1 1d       	adc	r31, r1
    1456:	80 83       	st	Z, r24
}

//helper to act if one byte is left to receive
void handle_one_byte(uint8_t bytes_left, uint8_t volatile * TWI_addr)
{
	if(bytes_left == 1)
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	e8 12       	cpse	r14, r24
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <TWI_Master_Receive+0x70>
	{
		//Data byte will be received and NACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(0<<TWEA)|(1<<TWEN));
    145e:	4c 83       	std	Y+4, r20	; 0x04
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <TWI_Master_Receive+0x72>
	}
	
	else
	{
		//DAta byte will be received and ACK returned
		*(TWI_addr + TWCR)=((1<<TWINT)|(1<<TWEA)|(1<<TWEN));
    1462:	2c 83       	std	Y+4, r18	; 0x04
			else if(temp8 == 0x50)
			{
				array_name[index] = *(TWI_addr +TWDR);
				
				handle_one_byte(num_bytes, TWI_addr);
				index++;
    1464:	9f 5f       	subi	r25, 0xFF	; 255
				num_bytes--;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	e8 1a       	sub	r14, r24
    146a:	f1 08       	sbc	r15, r1
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <TWI_Master_Receive+0x96>
			}
			
			//Data byte has been received and NACK has been returned
			else if (temp8 == 0x58)
    146e:	88 35       	cpi	r24, 0x58	; 88
    1470:	59 f4       	brne	.+22     	; 0x1488 <TWI_Master_Receive+0x96>
			{
				array_name[index] = *(TWI_addr +TWDR);
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	f6 01       	movw	r30, r12
    1476:	e9 0f       	add	r30, r25
    1478:	f1 1d       	adc	r31, r1
    147a:	80 83       	st	Z, r24
void send_stop(uint8_t volatile * TWI_addr)
{	
	uint8_t status;
	
	//Send stop bit
	*(TWI_addr+TWCR )=( (1<<TWINT ) | (1<<TWSTO) | (1<<TWEN));
    147c:	3c 83       	std	Y+4, r19	; 0x04
	
	//wait for stop bit to be cleared, indicating top condition is executed on bus
	do
	{
		status = *(TWI_addr + TWCR);
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
			//Data byte has been received and NACK has been returned
			else if (temp8 == 0x58)
			{
				array_name[index] = *(TWI_addr +TWDR);
				send_stop(TWI_addr);
				index++;
    1480:	9f 5f       	subi	r25, 0xFF	; 255
				num_bytes--;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	e8 1a       	sub	r14, r24
    1486:	f1 08       	sbc	r15, r1
			}
			
			
			
			if(num_bytes > 0)
    1488:	e1 14       	cp	r14, r1
    148a:	f1 04       	cpc	r15, r1
    148c:	51 f0       	breq	.+20     	; 0x14a2 <TWI_Master_Receive+0xb0>
			{
				do
				{
					status=*(TWI_addr+TWCR);
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
				}while((status & (1 << TWINT)) == 0);
    1490:	88 23       	and	r24, r24
    1492:	ec f7       	brge	.-6      	; 0x148e <TWI_Master_Receive+0x9c>
				
				//write to temp8
				temp8 = (*(TWI_addr + TWSR) & 0xF8);
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 7f       	andi	r24, 0xF8	; 248
    1498:	cf cf       	rjmp	.-98     	; 0x1438 <TWI_Master_Receive+0x46>
		temp8=(*(TWI_addr + TWSR) & 0xF8);
	}
	
	else
	{
		return_value = start_error; 
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <TWI_Master_Receive+0xb2>
	return return_value;
}

uint8_t TWI_Master_Receive(uint8_t volatile *TWI_addr, uint8_t device_addr, uint32_t int_addr, uint8_t int_addr_sz, uint16_t num_bytes, uint8_t * array_name)
{
	uint8_t return_value = no_errors;
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <TWI_Master_Receive+0xb2>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
			}
		} 
	}
	
	return return_value;
}
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	08 95       	ret

000014b4 <UART_init>:




void UART_init (uint8_t volatile * UART_addr, uint16_t Baud_Rate)
{
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	ec 01       	movw	r28, r24
	uint16_t Baud_Rate_Reload;
	Baud_Rate_Reload = (uint16_t)(((F_CPU/F_DIV)/(8UL*(2-U2X_bit)*Baud_Rate))-1);
    14ba:	cb 01       	movw	r24, r22
    14bc:	a0 e0       	ldi	r26, 0x00	; 0
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	aa 1f       	adc	r26, r26
    14c6:	bb 1f       	adc	r27, r27
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	aa 1f       	adc	r26, r26
    14ce:	bb 1f       	adc	r27, r27
    14d0:	9c 01       	movw	r18, r24
    14d2:	ad 01       	movw	r20, r26
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	44 1f       	adc	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	74 e2       	ldi	r23, 0x24	; 36
    14e0:	84 ef       	ldi	r24, 0xF4	; 244
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 37 0b 	call	0x166e	; 0x166e <__udivmodsi4>
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	31 09       	sbc	r19, r1
	
	*(UART_addr+UBBRH) = (Baud_Rate_Reload / 256);
    14ec:	3d 83       	std	Y+5, r19	; 0x05
	*(UART_addr+UBBRL) = (Baud_Rate_Reload % 256);
    14ee:	2c 83       	std	Y+4, r18	; 0x04
		
	*(UART_addr+UCSRA) = U2X_bit<<1;
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	88 83       	st	Y, r24
	*(UART_addr+UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_bits;
    14f4:	86 e0       	ldi	r24, 0x06	; 6
    14f6:	8a 83       	std	Y+2, r24	; 0x02
	*(UART_addr+UCSRB) = RX_enable|TX_enable;
    14f8:	88 e1       	ldi	r24, 0x18	; 24
    14fa:	89 83       	std	Y+1, r24	; 0x01
}
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <UART_Transmit>:

int8_t UART_Transmit(uint8_t volatile * UART_addr, int8_t c)
{
    1502:	fc 01       	movw	r30, r24
	uint8_t status;
	do
	{
		status=*(UART_addr+UCSRA);
    1504:	90 81       	ld	r25, Z
	} while ((status & (1 << UDRE))!=(1 << UDRE));
    1506:	95 ff       	sbrs	r25, 5
    1508:	fd cf       	rjmp	.-6      	; 0x1504 <UART_Transmit+0x2>
	*(UART_addr+UDR) = c;
    150a:	66 83       	std	Z+6, r22	; 0x06
	return 0;
}
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	08 95       	ret

00001510 <UART_Transmit_String>:
	}
	return index;
}

void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, int8_t * string_name)
{
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	7c 01       	movw	r14, r24
    1522:	8a 01       	movw	r16, r20
	int8_t temp8,index;
	if(num_bytes==0)
    1524:	66 23       	and	r22, r22
    1526:	31 f0       	breq	.+12     	; 0x1534 <UART_Transmit_String+0x24>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    1528:	c6 2e       	mov	r12, r22
    152a:	d1 2c       	mov	r13, r1
    152c:	1c 14       	cp	r1, r12
    152e:	1d 04       	cpc	r1, r13
    1530:	74 f0       	brlt	.+28     	; 0x154e <UART_Transmit_String+0x3e>
    1532:	1f c0       	rjmp	.+62     	; 0x1572 <UART_Transmit_String+0x62>
void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, int8_t * string_name)
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
    1534:	fa 01       	movw	r30, r20
    1536:	60 81       	ld	r22, Z
		while (temp8!=0)
    1538:	66 23       	and	r22, r22
    153a:	d9 f0       	breq	.+54     	; 0x1572 <UART_Transmit_String+0x62>
    153c:	ea 01       	movw	r28, r20
    153e:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Transmit(UART_addr, temp8);
    1540:	c7 01       	movw	r24, r14
    1542:	0e 94 81 0a 	call	0x1502	; 0x1502 <UART_Transmit>
			string_name++;
			temp8=*string_name;
    1546:	69 91       	ld	r22, Y+
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
    1548:	61 11       	cpse	r22, r1
    154a:	fa cf       	rjmp	.-12     	; 0x1540 <UART_Transmit_String+0x30>
    154c:	12 c0       	rjmp	.+36     	; 0x1572 <UART_Transmit_String+0x62>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    154e:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_Transmit(UART_addr, string_name[index]);
    1550:	f8 01       	movw	r30, r16
    1552:	ec 0f       	add	r30, r28
    1554:	f1 1d       	adc	r31, r1
    1556:	c7 fd       	sbrc	r28, 7
    1558:	fa 95       	dec	r31
    155a:	60 81       	ld	r22, Z
    155c:	c7 01       	movw	r24, r14
    155e:	0e 94 81 0a 	call	0x1502	; 0x1502 <UART_Transmit>
    1562:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
    1564:	8c 2f       	mov	r24, r28
    1566:	0c 2e       	mov	r0, r28
    1568:	00 0c       	add	r0, r0
    156a:	99 0b       	sbc	r25, r25
    156c:	8c 15       	cp	r24, r12
    156e:	9d 05       	cpc	r25, r13
    1570:	7c f3       	brlt	.-34     	; 0x1550 <UART_Transmit_String+0x40>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	df 90       	pop	r13
    1580:	cf 90       	pop	r12
    1582:	08 95       	ret

00001584 <write_STA>:
 *  Author: snspzv
 */ 
#include "TWI_funcs.h"
#include <avr/pgmspace.h>
void write_STA()
{
    1584:	7f 92       	push	r7
    1586:	8f 92       	push	r8
    1588:	9f 92       	push	r9
    158a:	af 92       	push	r10
    158c:	bf 92       	push	r11
    158e:	cf 92       	push	r12
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	6e 97       	sbiw	r28, 0x1e	; 30
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
	extern const  uint8_t CONFIG[3998];
	extern const  uint8_t CONFIG2[50];
	
	uint32_t reg_addr;
	uint8_t * send_array;
	uint8_t index = 0;
    15ae:	71 2c       	mov	r7, r1
	uint8_t status = no_errors;
	uint8_t timeout = 50;
	uint8_t prnt_bffr[30];
	do 
	{
		reg_addr = pgm_read_byte(&CONFIG[index]);
    15b0:	e7 2d       	mov	r30, r7
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	e4 53       	subi	r30, 0x34	; 52
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	e4 91       	lpm	r30, Z
    15ba:	8e 2e       	mov	r8, r30
    15bc:	91 2c       	mov	r9, r1
    15be:	a1 2c       	mov	r10, r1
    15c0:	b1 2c       	mov	r11, r1
		index++;
		send_array[0] = pgm_read_byte(&CONFIG[index]);
    15c2:	e1 e0       	ldi	r30, 0x01	; 1
    15c4:	e7 0d       	add	r30, r7
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	e4 53       	subi	r30, 0x34	; 52
    15ca:	ff 4f       	sbci	r31, 0xFF	; 255
    15cc:	e4 91       	lpm	r30, Z
    15ce:	e0 93 00 00 	sts	0x0000, r30	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
		index++;
    15d2:	73 94       	inc	r7
    15d4:	73 94       	inc	r7
		timeout = 50;
    15d6:	12 e3       	ldi	r17, 0x32	; 50
		do 
		{
			status = TWI_Master_Transmit(&TWI1, 0x43, reg_addr, 1, 1, send_array);
    15d8:	c1 2c       	mov	r12, r1
    15da:	d1 2c       	mov	r13, r1
    15dc:	ee 24       	eor	r14, r14
    15de:	e3 94       	inc	r14
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 e0       	ldi	r16, 0x01	; 1
    15e4:	a5 01       	movw	r20, r10
    15e6:	94 01       	movw	r18, r8
    15e8:	63 e4       	ldi	r22, 0x43	; 67
    15ea:	88 ed       	ldi	r24, 0xD8	; 216
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 52 09 	call	0x12a4	; 0x12a4 <TWI_Master_Transmit>
			timeout--;
    15f2:	11 50       	subi	r17, 0x01	; 1
		} while ((status != no_errors) && (timeout != 0));
    15f4:	88 23       	and	r24, r24
    15f6:	19 f0       	breq	.+6      	; 0x15fe <write_STA+0x7a>
    15f8:	11 11       	cpse	r17, r1
    15fa:	ee cf       	rjmp	.-36     	; 0x15d8 <write_STA+0x54>
    15fc:	1e c0       	rjmp	.+60     	; 0x163a <write_STA+0xb6>
	} while ((reg_addr != 0xFF) && (timeout != 0));
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	88 16       	cp	r8, r24
    1602:	91 04       	cpc	r9, r1
    1604:	a1 04       	cpc	r10, r1
    1606:	b1 04       	cpc	r11, r1
    1608:	19 f0       	breq	.+6      	; 0x1610 <write_STA+0x8c>
    160a:	11 11       	cpse	r17, r1
    160c:	d1 cf       	rjmp	.-94     	; 0x15b0 <write_STA+0x2c>
    160e:	1b c0       	rjmp	.+54     	; 0x1646 <write_STA+0xc2>

	if(timeout!=0)
    1610:	11 23       	and	r17, r17
    1612:	c9 f0       	breq	.+50     	; 0x1646 <write_STA+0xc2>
	{
		sprintf(prnt_bffr, "Config sent.../n/r");
    1614:	83 e1       	ldi	r24, 0x13	; 19
    1616:	e9 e1       	ldi	r30, 0x19	; 25
    1618:	f1 e0       	ldi	r31, 0x01	; 1
    161a:	de 01       	movw	r26, r28
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	01 90       	ld	r0, Z+
    1620:	0d 92       	st	X+, r0
    1622:	8a 95       	dec	r24
    1624:	e1 f7       	brne	.-8      	; 0x161e <write_STA+0x9a>
		UART_Transmit_String(&UART1,0,prnt_bffr);
    1626:	ae 01       	movw	r20, r28
    1628:	4f 5f       	subi	r20, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 88 0a 	call	0x1510	; 0x1510 <UART_Transmit_String>
	}
	
	
	
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <write_STA+0xc2>
		do 
		{
			status = TWI_Master_Transmit(&TWI1, 0x43, reg_addr, 1, 1, send_array);
			timeout--;
		} while ((status != no_errors) && (timeout != 0));
	} while ((reg_addr != 0xFF) && (timeout != 0));
    163a:	8f ef       	ldi	r24, 0xFF	; 255
    163c:	88 16       	cp	r8, r24
    163e:	91 04       	cpc	r9, r1
    1640:	a1 04       	cpc	r10, r1
    1642:	b1 04       	cpc	r11, r1
    1644:	29 f3       	breq	.-54     	; 0x1610 <write_STA+0x8c>
		UART_Transmit_String(&UART1,0,prnt_bffr);
	}
	
	
	
    1646:	6e 96       	adiw	r28, 0x1e	; 30
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	8f 90       	pop	r8
    166a:	7f 90       	pop	r7
    166c:	08 95       	ret

0000166e <__udivmodsi4>:
    166e:	a1 e2       	ldi	r26, 0x21	; 33
    1670:	1a 2e       	mov	r1, r26
    1672:	aa 1b       	sub	r26, r26
    1674:	bb 1b       	sub	r27, r27
    1676:	fd 01       	movw	r30, r26
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <__udivmodsi4_ep>

0000167a <__udivmodsi4_loop>:
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	ee 1f       	adc	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	a2 17       	cp	r26, r18
    1684:	b3 07       	cpc	r27, r19
    1686:	e4 07       	cpc	r30, r20
    1688:	f5 07       	cpc	r31, r21
    168a:	20 f0       	brcs	.+8      	; 0x1694 <__udivmodsi4_ep>
    168c:	a2 1b       	sub	r26, r18
    168e:	b3 0b       	sbc	r27, r19
    1690:	e4 0b       	sbc	r30, r20
    1692:	f5 0b       	sbc	r31, r21

00001694 <__udivmodsi4_ep>:
    1694:	66 1f       	adc	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	1a 94       	dec	r1
    169e:	69 f7       	brne	.-38     	; 0x167a <__udivmodsi4_loop>
    16a0:	60 95       	com	r22
    16a2:	70 95       	com	r23
    16a4:	80 95       	com	r24
    16a6:	90 95       	com	r25
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
    16ac:	bd 01       	movw	r22, r26
    16ae:	cf 01       	movw	r24, r30
    16b0:	08 95       	ret

000016b2 <sprintf>:
    16b2:	ae e0       	ldi	r26, 0x0E	; 14
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	ef e5       	ldi	r30, 0x5F	; 95
    16b8:	fb e0       	ldi	r31, 0x0B	; 11
    16ba:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x1c>
    16be:	0d 89       	ldd	r16, Y+21	; 0x15
    16c0:	1e 89       	ldd	r17, Y+22	; 0x16
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	8c 83       	std	Y+4, r24	; 0x04
    16c6:	1a 83       	std	Y+2, r17	; 0x02
    16c8:	09 83       	std	Y+1, r16	; 0x01
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f e7       	ldi	r25, 0x7F	; 127
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	ae 01       	movw	r20, r28
    16d4:	47 5e       	subi	r20, 0xE7	; 231
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	6f 89       	ldd	r22, Y+23	; 0x17
    16da:	78 8d       	ldd	r23, Y+24	; 0x18
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vfprintf>
    16e4:	ef 81       	ldd	r30, Y+7	; 0x07
    16e6:	f8 85       	ldd	r31, Y+8	; 0x08
    16e8:	e0 0f       	add	r30, r16
    16ea:	f1 1f       	adc	r31, r17
    16ec:	10 82       	st	Z, r1
    16ee:	2e 96       	adiw	r28, 0x0e	; 14
    16f0:	e4 e0       	ldi	r30, 0x04	; 4
    16f2:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x1c>

000016f6 <vfprintf>:
    16f6:	ab e0       	ldi	r26, 0x0B	; 11
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	fb e0       	ldi	r31, 0x0B	; 11
    16fe:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__prologue_saves__>
    1702:	6c 01       	movw	r12, r24
    1704:	7b 01       	movw	r14, r22
    1706:	8a 01       	movw	r16, r20
    1708:	fc 01       	movw	r30, r24
    170a:	17 82       	std	Z+7, r1	; 0x07
    170c:	16 82       	std	Z+6, r1	; 0x06
    170e:	83 81       	ldd	r24, Z+3	; 0x03
    1710:	81 ff       	sbrs	r24, 1
    1712:	cc c1       	rjmp	.+920    	; 0x1aac <vfprintf+0x3b6>
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	3c 01       	movw	r6, r24
    171a:	f6 01       	movw	r30, r12
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	f7 01       	movw	r30, r14
    1720:	93 fd       	sbrc	r25, 3
    1722:	85 91       	lpm	r24, Z+
    1724:	93 ff       	sbrs	r25, 3
    1726:	81 91       	ld	r24, Z+
    1728:	7f 01       	movw	r14, r30
    172a:	88 23       	and	r24, r24
    172c:	09 f4       	brne	.+2      	; 0x1730 <vfprintf+0x3a>
    172e:	ba c1       	rjmp	.+884    	; 0x1aa4 <vfprintf+0x3ae>
    1730:	85 32       	cpi	r24, 0x25	; 37
    1732:	39 f4       	brne	.+14     	; 0x1742 <vfprintf+0x4c>
    1734:	93 fd       	sbrc	r25, 3
    1736:	85 91       	lpm	r24, Z+
    1738:	93 ff       	sbrs	r25, 3
    173a:	81 91       	ld	r24, Z+
    173c:	7f 01       	movw	r14, r30
    173e:	85 32       	cpi	r24, 0x25	; 37
    1740:	29 f4       	brne	.+10     	; 0x174c <vfprintf+0x56>
    1742:	b6 01       	movw	r22, r12
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    174a:	e7 cf       	rjmp	.-50     	; 0x171a <vfprintf+0x24>
    174c:	91 2c       	mov	r9, r1
    174e:	21 2c       	mov	r2, r1
    1750:	31 2c       	mov	r3, r1
    1752:	ff e1       	ldi	r31, 0x1F	; 31
    1754:	f3 15       	cp	r31, r3
    1756:	d8 f0       	brcs	.+54     	; 0x178e <vfprintf+0x98>
    1758:	8b 32       	cpi	r24, 0x2B	; 43
    175a:	79 f0       	breq	.+30     	; 0x177a <vfprintf+0x84>
    175c:	38 f4       	brcc	.+14     	; 0x176c <vfprintf+0x76>
    175e:	80 32       	cpi	r24, 0x20	; 32
    1760:	79 f0       	breq	.+30     	; 0x1780 <vfprintf+0x8a>
    1762:	83 32       	cpi	r24, 0x23	; 35
    1764:	a1 f4       	brne	.+40     	; 0x178e <vfprintf+0x98>
    1766:	23 2d       	mov	r18, r3
    1768:	20 61       	ori	r18, 0x10	; 16
    176a:	1d c0       	rjmp	.+58     	; 0x17a6 <vfprintf+0xb0>
    176c:	8d 32       	cpi	r24, 0x2D	; 45
    176e:	61 f0       	breq	.+24     	; 0x1788 <vfprintf+0x92>
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	69 f4       	brne	.+26     	; 0x178e <vfprintf+0x98>
    1774:	23 2d       	mov	r18, r3
    1776:	21 60       	ori	r18, 0x01	; 1
    1778:	16 c0       	rjmp	.+44     	; 0x17a6 <vfprintf+0xb0>
    177a:	83 2d       	mov	r24, r3
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	38 2e       	mov	r3, r24
    1780:	e3 2d       	mov	r30, r3
    1782:	e4 60       	ori	r30, 0x04	; 4
    1784:	3e 2e       	mov	r3, r30
    1786:	2a c0       	rjmp	.+84     	; 0x17dc <vfprintf+0xe6>
    1788:	f3 2d       	mov	r31, r3
    178a:	f8 60       	ori	r31, 0x08	; 8
    178c:	1d c0       	rjmp	.+58     	; 0x17c8 <vfprintf+0xd2>
    178e:	37 fc       	sbrc	r3, 7
    1790:	2d c0       	rjmp	.+90     	; 0x17ec <vfprintf+0xf6>
    1792:	20 ed       	ldi	r18, 0xD0	; 208
    1794:	28 0f       	add	r18, r24
    1796:	2a 30       	cpi	r18, 0x0A	; 10
    1798:	40 f0       	brcs	.+16     	; 0x17aa <vfprintf+0xb4>
    179a:	8e 32       	cpi	r24, 0x2E	; 46
    179c:	b9 f4       	brne	.+46     	; 0x17cc <vfprintf+0xd6>
    179e:	36 fc       	sbrc	r3, 6
    17a0:	81 c1       	rjmp	.+770    	; 0x1aa4 <vfprintf+0x3ae>
    17a2:	23 2d       	mov	r18, r3
    17a4:	20 64       	ori	r18, 0x40	; 64
    17a6:	32 2e       	mov	r3, r18
    17a8:	19 c0       	rjmp	.+50     	; 0x17dc <vfprintf+0xe6>
    17aa:	36 fe       	sbrs	r3, 6
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <vfprintf+0xc4>
    17ae:	8a e0       	ldi	r24, 0x0A	; 10
    17b0:	98 9e       	mul	r9, r24
    17b2:	20 0d       	add	r18, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	92 2e       	mov	r9, r18
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <vfprintf+0xe6>
    17ba:	ea e0       	ldi	r30, 0x0A	; 10
    17bc:	2e 9e       	mul	r2, r30
    17be:	20 0d       	add	r18, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	22 2e       	mov	r2, r18
    17c4:	f3 2d       	mov	r31, r3
    17c6:	f0 62       	ori	r31, 0x20	; 32
    17c8:	3f 2e       	mov	r3, r31
    17ca:	08 c0       	rjmp	.+16     	; 0x17dc <vfprintf+0xe6>
    17cc:	8c 36       	cpi	r24, 0x6C	; 108
    17ce:	21 f4       	brne	.+8      	; 0x17d8 <vfprintf+0xe2>
    17d0:	83 2d       	mov	r24, r3
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	38 2e       	mov	r3, r24
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0xe6>
    17d8:	88 36       	cpi	r24, 0x68	; 104
    17da:	41 f4       	brne	.+16     	; 0x17ec <vfprintf+0xf6>
    17dc:	f7 01       	movw	r30, r14
    17de:	93 fd       	sbrc	r25, 3
    17e0:	85 91       	lpm	r24, Z+
    17e2:	93 ff       	sbrs	r25, 3
    17e4:	81 91       	ld	r24, Z+
    17e6:	7f 01       	movw	r14, r30
    17e8:	81 11       	cpse	r24, r1
    17ea:	b3 cf       	rjmp	.-154    	; 0x1752 <vfprintf+0x5c>
    17ec:	98 2f       	mov	r25, r24
    17ee:	9f 7d       	andi	r25, 0xDF	; 223
    17f0:	95 54       	subi	r25, 0x45	; 69
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <vfprintf+0x10a>
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	9f e3       	ldi	r25, 0x3F	; 63
    17fc:	99 83       	std	Y+1, r25	; 0x01
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <vfprintf+0x124>
    1800:	83 36       	cpi	r24, 0x63	; 99
    1802:	31 f0       	breq	.+12     	; 0x1810 <vfprintf+0x11a>
    1804:	83 37       	cpi	r24, 0x73	; 115
    1806:	71 f0       	breq	.+28     	; 0x1824 <vfprintf+0x12e>
    1808:	83 35       	cpi	r24, 0x53	; 83
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0x118>
    180c:	59 c0       	rjmp	.+178    	; 0x18c0 <vfprintf+0x1ca>
    180e:	21 c0       	rjmp	.+66     	; 0x1852 <vfprintf+0x15c>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	0e 5f       	subi	r16, 0xFE	; 254
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	88 24       	eor	r8, r8
    181c:	83 94       	inc	r8
    181e:	91 2c       	mov	r9, r1
    1820:	53 01       	movw	r10, r6
    1822:	13 c0       	rjmp	.+38     	; 0x184a <vfprintf+0x154>
    1824:	28 01       	movw	r4, r16
    1826:	f2 e0       	ldi	r31, 0x02	; 2
    1828:	4f 0e       	add	r4, r31
    182a:	51 1c       	adc	r5, r1
    182c:	f8 01       	movw	r30, r16
    182e:	a0 80       	ld	r10, Z
    1830:	b1 80       	ldd	r11, Z+1	; 0x01
    1832:	36 fe       	sbrs	r3, 6
    1834:	03 c0       	rjmp	.+6      	; 0x183c <vfprintf+0x146>
    1836:	69 2d       	mov	r22, r9
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <vfprintf+0x14a>
    183c:	6f ef       	ldi	r22, 0xFF	; 255
    183e:	7f ef       	ldi	r23, 0xFF	; 255
    1840:	c5 01       	movw	r24, r10
    1842:	0e 94 67 0d 	call	0x1ace	; 0x1ace <strnlen>
    1846:	4c 01       	movw	r8, r24
    1848:	82 01       	movw	r16, r4
    184a:	f3 2d       	mov	r31, r3
    184c:	ff 77       	andi	r31, 0x7F	; 127
    184e:	3f 2e       	mov	r3, r31
    1850:	16 c0       	rjmp	.+44     	; 0x187e <vfprintf+0x188>
    1852:	28 01       	movw	r4, r16
    1854:	22 e0       	ldi	r18, 0x02	; 2
    1856:	42 0e       	add	r4, r18
    1858:	51 1c       	adc	r5, r1
    185a:	f8 01       	movw	r30, r16
    185c:	a0 80       	ld	r10, Z
    185e:	b1 80       	ldd	r11, Z+1	; 0x01
    1860:	36 fe       	sbrs	r3, 6
    1862:	03 c0       	rjmp	.+6      	; 0x186a <vfprintf+0x174>
    1864:	69 2d       	mov	r22, r9
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x178>
    186a:	6f ef       	ldi	r22, 0xFF	; 255
    186c:	7f ef       	ldi	r23, 0xFF	; 255
    186e:	c5 01       	movw	r24, r10
    1870:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strnlen_P>
    1874:	4c 01       	movw	r8, r24
    1876:	f3 2d       	mov	r31, r3
    1878:	f0 68       	ori	r31, 0x80	; 128
    187a:	3f 2e       	mov	r3, r31
    187c:	82 01       	movw	r16, r4
    187e:	33 fc       	sbrc	r3, 3
    1880:	1b c0       	rjmp	.+54     	; 0x18b8 <vfprintf+0x1c2>
    1882:	82 2d       	mov	r24, r2
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 16       	cp	r8, r24
    1888:	99 06       	cpc	r9, r25
    188a:	b0 f4       	brcc	.+44     	; 0x18b8 <vfprintf+0x1c2>
    188c:	b6 01       	movw	r22, r12
    188e:	80 e2       	ldi	r24, 0x20	; 32
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1896:	2a 94       	dec	r2
    1898:	f4 cf       	rjmp	.-24     	; 0x1882 <vfprintf+0x18c>
    189a:	f5 01       	movw	r30, r10
    189c:	37 fc       	sbrc	r3, 7
    189e:	85 91       	lpm	r24, Z+
    18a0:	37 fe       	sbrs	r3, 7
    18a2:	81 91       	ld	r24, Z+
    18a4:	5f 01       	movw	r10, r30
    18a6:	b6 01       	movw	r22, r12
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    18ae:	21 10       	cpse	r2, r1
    18b0:	2a 94       	dec	r2
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	82 1a       	sub	r8, r18
    18b6:	91 08       	sbc	r9, r1
    18b8:	81 14       	cp	r8, r1
    18ba:	91 04       	cpc	r9, r1
    18bc:	71 f7       	brne	.-36     	; 0x189a <vfprintf+0x1a4>
    18be:	e8 c0       	rjmp	.+464    	; 0x1a90 <vfprintf+0x39a>
    18c0:	84 36       	cpi	r24, 0x64	; 100
    18c2:	11 f0       	breq	.+4      	; 0x18c8 <vfprintf+0x1d2>
    18c4:	89 36       	cpi	r24, 0x69	; 105
    18c6:	41 f5       	brne	.+80     	; 0x1918 <vfprintf+0x222>
    18c8:	f8 01       	movw	r30, r16
    18ca:	37 fe       	sbrs	r3, 7
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <vfprintf+0x1e6>
    18ce:	60 81       	ld	r22, Z
    18d0:	71 81       	ldd	r23, Z+1	; 0x01
    18d2:	82 81       	ldd	r24, Z+2	; 0x02
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	0c 5f       	subi	r16, 0xFC	; 252
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <vfprintf+0x1f6>
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	07 2e       	mov	r0, r23
    18e2:	00 0c       	add	r0, r0
    18e4:	88 0b       	sbc	r24, r24
    18e6:	99 0b       	sbc	r25, r25
    18e8:	0e 5f       	subi	r16, 0xFE	; 254
    18ea:	1f 4f       	sbci	r17, 0xFF	; 255
    18ec:	f3 2d       	mov	r31, r3
    18ee:	ff 76       	andi	r31, 0x6F	; 111
    18f0:	3f 2e       	mov	r3, r31
    18f2:	97 ff       	sbrs	r25, 7
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <vfprintf+0x212>
    18f6:	90 95       	com	r25
    18f8:	80 95       	com	r24
    18fa:	70 95       	com	r23
    18fc:	61 95       	neg	r22
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	8f 4f       	sbci	r24, 0xFF	; 255
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	f0 68       	ori	r31, 0x80	; 128
    1906:	3f 2e       	mov	r3, r31
    1908:	2a e0       	ldi	r18, 0x0A	; 10
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	a3 01       	movw	r20, r6
    190e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__ultoa_invert>
    1912:	88 2e       	mov	r8, r24
    1914:	86 18       	sub	r8, r6
    1916:	45 c0       	rjmp	.+138    	; 0x19a2 <vfprintf+0x2ac>
    1918:	85 37       	cpi	r24, 0x75	; 117
    191a:	31 f4       	brne	.+12     	; 0x1928 <vfprintf+0x232>
    191c:	23 2d       	mov	r18, r3
    191e:	2f 7e       	andi	r18, 0xEF	; 239
    1920:	b2 2e       	mov	r11, r18
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	25 c0       	rjmp	.+74     	; 0x1972 <vfprintf+0x27c>
    1928:	93 2d       	mov	r25, r3
    192a:	99 7f       	andi	r25, 0xF9	; 249
    192c:	b9 2e       	mov	r11, r25
    192e:	8f 36       	cpi	r24, 0x6F	; 111
    1930:	c1 f0       	breq	.+48     	; 0x1962 <vfprintf+0x26c>
    1932:	18 f4       	brcc	.+6      	; 0x193a <vfprintf+0x244>
    1934:	88 35       	cpi	r24, 0x58	; 88
    1936:	79 f0       	breq	.+30     	; 0x1956 <vfprintf+0x260>
    1938:	b5 c0       	rjmp	.+362    	; 0x1aa4 <vfprintf+0x3ae>
    193a:	80 37       	cpi	r24, 0x70	; 112
    193c:	19 f0       	breq	.+6      	; 0x1944 <vfprintf+0x24e>
    193e:	88 37       	cpi	r24, 0x78	; 120
    1940:	21 f0       	breq	.+8      	; 0x194a <vfprintf+0x254>
    1942:	b0 c0       	rjmp	.+352    	; 0x1aa4 <vfprintf+0x3ae>
    1944:	e9 2f       	mov	r30, r25
    1946:	e0 61       	ori	r30, 0x10	; 16
    1948:	be 2e       	mov	r11, r30
    194a:	b4 fe       	sbrs	r11, 4
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <vfprintf+0x272>
    194e:	fb 2d       	mov	r31, r11
    1950:	f4 60       	ori	r31, 0x04	; 4
    1952:	bf 2e       	mov	r11, r31
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <vfprintf+0x272>
    1956:	34 fe       	sbrs	r3, 4
    1958:	0a c0       	rjmp	.+20     	; 0x196e <vfprintf+0x278>
    195a:	29 2f       	mov	r18, r25
    195c:	26 60       	ori	r18, 0x06	; 6
    195e:	b2 2e       	mov	r11, r18
    1960:	06 c0       	rjmp	.+12     	; 0x196e <vfprintf+0x278>
    1962:	28 e0       	ldi	r18, 0x08	; 8
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <vfprintf+0x27c>
    1968:	20 e1       	ldi	r18, 0x10	; 16
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <vfprintf+0x27c>
    196e:	20 e1       	ldi	r18, 0x10	; 16
    1970:	32 e0       	ldi	r19, 0x02	; 2
    1972:	f8 01       	movw	r30, r16
    1974:	b7 fe       	sbrs	r11, 7
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <vfprintf+0x290>
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0c 5f       	subi	r16, 0xFC	; 252
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <vfprintf+0x29c>
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	a3 01       	movw	r20, r6
    1994:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__ultoa_invert>
    1998:	88 2e       	mov	r8, r24
    199a:	86 18       	sub	r8, r6
    199c:	fb 2d       	mov	r31, r11
    199e:	ff 77       	andi	r31, 0x7F	; 127
    19a0:	3f 2e       	mov	r3, r31
    19a2:	36 fe       	sbrs	r3, 6
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <vfprintf+0x2ca>
    19a6:	23 2d       	mov	r18, r3
    19a8:	2e 7f       	andi	r18, 0xFE	; 254
    19aa:	a2 2e       	mov	r10, r18
    19ac:	89 14       	cp	r8, r9
    19ae:	58 f4       	brcc	.+22     	; 0x19c6 <vfprintf+0x2d0>
    19b0:	34 fe       	sbrs	r3, 4
    19b2:	0b c0       	rjmp	.+22     	; 0x19ca <vfprintf+0x2d4>
    19b4:	32 fc       	sbrc	r3, 2
    19b6:	09 c0       	rjmp	.+18     	; 0x19ca <vfprintf+0x2d4>
    19b8:	83 2d       	mov	r24, r3
    19ba:	8e 7e       	andi	r24, 0xEE	; 238
    19bc:	a8 2e       	mov	r10, r24
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <vfprintf+0x2d4>
    19c0:	b8 2c       	mov	r11, r8
    19c2:	a3 2c       	mov	r10, r3
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <vfprintf+0x2d6>
    19c6:	b8 2c       	mov	r11, r8
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <vfprintf+0x2d6>
    19ca:	b9 2c       	mov	r11, r9
    19cc:	a4 fe       	sbrs	r10, 4
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <vfprintf+0x2f8>
    19d0:	fe 01       	movw	r30, r28
    19d2:	e8 0d       	add	r30, r8
    19d4:	f1 1d       	adc	r31, r1
    19d6:	80 81       	ld	r24, Z
    19d8:	80 33       	cpi	r24, 0x30	; 48
    19da:	21 f4       	brne	.+8      	; 0x19e4 <vfprintf+0x2ee>
    19dc:	9a 2d       	mov	r25, r10
    19de:	99 7e       	andi	r25, 0xE9	; 233
    19e0:	a9 2e       	mov	r10, r25
    19e2:	09 c0       	rjmp	.+18     	; 0x19f6 <vfprintf+0x300>
    19e4:	a2 fe       	sbrs	r10, 2
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <vfprintf+0x2fe>
    19e8:	b3 94       	inc	r11
    19ea:	b3 94       	inc	r11
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <vfprintf+0x300>
    19ee:	8a 2d       	mov	r24, r10
    19f0:	86 78       	andi	r24, 0x86	; 134
    19f2:	09 f0       	breq	.+2      	; 0x19f6 <vfprintf+0x300>
    19f4:	b3 94       	inc	r11
    19f6:	a3 fc       	sbrc	r10, 3
    19f8:	11 c0       	rjmp	.+34     	; 0x1a1c <vfprintf+0x326>
    19fa:	a0 fe       	sbrs	r10, 0
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <vfprintf+0x314>
    19fe:	b2 14       	cp	r11, r2
    1a00:	88 f4       	brcc	.+34     	; 0x1a24 <vfprintf+0x32e>
    1a02:	28 0c       	add	r2, r8
    1a04:	92 2c       	mov	r9, r2
    1a06:	9b 18       	sub	r9, r11
    1a08:	0e c0       	rjmp	.+28     	; 0x1a26 <vfprintf+0x330>
    1a0a:	b2 14       	cp	r11, r2
    1a0c:	60 f4       	brcc	.+24     	; 0x1a26 <vfprintf+0x330>
    1a0e:	b6 01       	movw	r22, r12
    1a10:	80 e2       	ldi	r24, 0x20	; 32
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a18:	b3 94       	inc	r11
    1a1a:	f7 cf       	rjmp	.-18     	; 0x1a0a <vfprintf+0x314>
    1a1c:	b2 14       	cp	r11, r2
    1a1e:	18 f4       	brcc	.+6      	; 0x1a26 <vfprintf+0x330>
    1a20:	2b 18       	sub	r2, r11
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <vfprintf+0x332>
    1a24:	98 2c       	mov	r9, r8
    1a26:	21 2c       	mov	r2, r1
    1a28:	a4 fe       	sbrs	r10, 4
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <vfprintf+0x356>
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	80 e3       	ldi	r24, 0x30	; 48
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a36:	a2 fe       	sbrs	r10, 2
    1a38:	17 c0       	rjmp	.+46     	; 0x1a68 <vfprintf+0x372>
    1a3a:	a1 fc       	sbrc	r10, 1
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <vfprintf+0x34e>
    1a3e:	88 e7       	ldi	r24, 0x78	; 120
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <vfprintf+0x352>
    1a44:	88 e5       	ldi	r24, 0x58	; 88
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	b6 01       	movw	r22, r12
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <vfprintf+0x36e>
    1a4c:	8a 2d       	mov	r24, r10
    1a4e:	86 78       	andi	r24, 0x86	; 134
    1a50:	59 f0       	breq	.+22     	; 0x1a68 <vfprintf+0x372>
    1a52:	a1 fe       	sbrs	r10, 1
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <vfprintf+0x364>
    1a56:	8b e2       	ldi	r24, 0x2B	; 43
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <vfprintf+0x366>
    1a5a:	80 e2       	ldi	r24, 0x20	; 32
    1a5c:	a7 fc       	sbrc	r10, 7
    1a5e:	8d e2       	ldi	r24, 0x2D	; 45
    1a60:	b6 01       	movw	r22, r12
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a68:	89 14       	cp	r8, r9
    1a6a:	38 f4       	brcc	.+14     	; 0x1a7a <vfprintf+0x384>
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	80 e3       	ldi	r24, 0x30	; 48
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a76:	9a 94       	dec	r9
    1a78:	f7 cf       	rjmp	.-18     	; 0x1a68 <vfprintf+0x372>
    1a7a:	8a 94       	dec	r8
    1a7c:	f3 01       	movw	r30, r6
    1a7e:	e8 0d       	add	r30, r8
    1a80:	f1 1d       	adc	r31, r1
    1a82:	80 81       	ld	r24, Z
    1a84:	b6 01       	movw	r22, r12
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1a8c:	81 10       	cpse	r8, r1
    1a8e:	f5 cf       	rjmp	.-22     	; 0x1a7a <vfprintf+0x384>
    1a90:	22 20       	and	r2, r2
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <vfprintf+0x3a0>
    1a94:	42 ce       	rjmp	.-892    	; 0x171a <vfprintf+0x24>
    1a96:	b6 01       	movw	r22, r12
    1a98:	80 e2       	ldi	r24, 0x20	; 32
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <fputc>
    1aa0:	2a 94       	dec	r2
    1aa2:	f6 cf       	rjmp	.-20     	; 0x1a90 <vfprintf+0x39a>
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	86 81       	ldd	r24, Z+6	; 0x06
    1aa8:	97 81       	ldd	r25, Z+7	; 0x07
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x3ba>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	9f ef       	ldi	r25, 0xFF	; 255
    1ab0:	2b 96       	adiw	r28, 0x0b	; 11
    1ab2:	e2 e1       	ldi	r30, 0x12	; 18
    1ab4:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__epilogue_restores__>

00001ab8 <strnlen_P>:
    1ab8:	fc 01       	movw	r30, r24
    1aba:	05 90       	lpm	r0, Z+
    1abc:	61 50       	subi	r22, 0x01	; 1
    1abe:	70 40       	sbci	r23, 0x00	; 0
    1ac0:	01 10       	cpse	r0, r1
    1ac2:	d8 f7       	brcc	.-10     	; 0x1aba <strnlen_P+0x2>
    1ac4:	80 95       	com	r24
    1ac6:	90 95       	com	r25
    1ac8:	8e 0f       	add	r24, r30
    1aca:	9f 1f       	adc	r25, r31
    1acc:	08 95       	ret

00001ace <strnlen>:
    1ace:	fc 01       	movw	r30, r24
    1ad0:	61 50       	subi	r22, 0x01	; 1
    1ad2:	70 40       	sbci	r23, 0x00	; 0
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	01 10       	cpse	r0, r1
    1ad8:	d8 f7       	brcc	.-10     	; 0x1ad0 <strnlen+0x2>
    1ada:	80 95       	com	r24
    1adc:	90 95       	com	r25
    1ade:	8e 0f       	add	r24, r30
    1ae0:	9f 1f       	adc	r25, r31
    1ae2:	08 95       	ret

00001ae4 <fputc>:
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	fb 01       	movw	r30, r22
    1aee:	23 81       	ldd	r18, Z+3	; 0x03
    1af0:	21 fd       	sbrc	r18, 1
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <fputc+0x16>
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	2c c0       	rjmp	.+88     	; 0x1b52 <fputc+0x6e>
    1afa:	22 ff       	sbrs	r18, 2
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <fputc+0x46>
    1afe:	46 81       	ldd	r20, Z+6	; 0x06
    1b00:	57 81       	ldd	r21, Z+7	; 0x07
    1b02:	24 81       	ldd	r18, Z+4	; 0x04
    1b04:	35 81       	ldd	r19, Z+5	; 0x05
    1b06:	42 17       	cp	r20, r18
    1b08:	53 07       	cpc	r21, r19
    1b0a:	44 f4       	brge	.+16     	; 0x1b1c <fputc+0x38>
    1b0c:	a0 81       	ld	r26, Z
    1b0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b10:	9d 01       	movw	r18, r26
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	31 83       	std	Z+1, r19	; 0x01
    1b18:	20 83       	st	Z, r18
    1b1a:	8c 93       	st	X, r24
    1b1c:	26 81       	ldd	r18, Z+6	; 0x06
    1b1e:	37 81       	ldd	r19, Z+7	; 0x07
    1b20:	2f 5f       	subi	r18, 0xFF	; 255
    1b22:	3f 4f       	sbci	r19, 0xFF	; 255
    1b24:	37 83       	std	Z+7, r19	; 0x07
    1b26:	26 83       	std	Z+6, r18	; 0x06
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <fputc+0x6e>
    1b2a:	8b 01       	movw	r16, r22
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	fb 01       	movw	r30, r22
    1b30:	00 84       	ldd	r0, Z+8	; 0x08
    1b32:	f1 85       	ldd	r31, Z+9	; 0x09
    1b34:	e0 2d       	mov	r30, r0
    1b36:	09 95       	icall
    1b38:	89 2b       	or	r24, r25
    1b3a:	e1 f6       	brne	.-72     	; 0x1af4 <fputc+0x10>
    1b3c:	d8 01       	movw	r26, r16
    1b3e:	16 96       	adiw	r26, 0x06	; 6
    1b40:	8d 91       	ld	r24, X+
    1b42:	9c 91       	ld	r25, X
    1b44:	17 97       	sbiw	r26, 0x07	; 7
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	17 96       	adiw	r26, 0x07	; 7
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
    1b4e:	16 97       	sbiw	r26, 0x06	; 6
    1b50:	ce 01       	movw	r24, r28
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <__ultoa_invert>:
    1b5c:	fa 01       	movw	r30, r20
    1b5e:	aa 27       	eor	r26, r26
    1b60:	28 30       	cpi	r18, 0x08	; 8
    1b62:	51 f1       	breq	.+84     	; 0x1bb8 <__ultoa_invert+0x5c>
    1b64:	20 31       	cpi	r18, 0x10	; 16
    1b66:	81 f1       	breq	.+96     	; 0x1bc8 <__ultoa_invert+0x6c>
    1b68:	e8 94       	clt
    1b6a:	6f 93       	push	r22
    1b6c:	6e 7f       	andi	r22, 0xFE	; 254
    1b6e:	6e 5f       	subi	r22, 0xFE	; 254
    1b70:	7f 4f       	sbci	r23, 0xFF	; 255
    1b72:	8f 4f       	sbci	r24, 0xFF	; 255
    1b74:	9f 4f       	sbci	r25, 0xFF	; 255
    1b76:	af 4f       	sbci	r26, 0xFF	; 255
    1b78:	b1 e0       	ldi	r27, 0x01	; 1
    1b7a:	3e d0       	rcall	.+124    	; 0x1bf8 <__ultoa_invert+0x9c>
    1b7c:	b4 e0       	ldi	r27, 0x04	; 4
    1b7e:	3c d0       	rcall	.+120    	; 0x1bf8 <__ultoa_invert+0x9c>
    1b80:	67 0f       	add	r22, r23
    1b82:	78 1f       	adc	r23, r24
    1b84:	89 1f       	adc	r24, r25
    1b86:	9a 1f       	adc	r25, r26
    1b88:	a1 1d       	adc	r26, r1
    1b8a:	68 0f       	add	r22, r24
    1b8c:	79 1f       	adc	r23, r25
    1b8e:	8a 1f       	adc	r24, r26
    1b90:	91 1d       	adc	r25, r1
    1b92:	a1 1d       	adc	r26, r1
    1b94:	6a 0f       	add	r22, r26
    1b96:	71 1d       	adc	r23, r1
    1b98:	81 1d       	adc	r24, r1
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	20 d0       	rcall	.+64     	; 0x1be0 <__ultoa_invert+0x84>
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <__ultoa_invert+0x48>
    1ba2:	68 94       	set
    1ba4:	3f 91       	pop	r19
    1ba6:	2a e0       	ldi	r18, 0x0A	; 10
    1ba8:	26 9f       	mul	r18, r22
    1baa:	11 24       	eor	r1, r1
    1bac:	30 19       	sub	r19, r0
    1bae:	30 5d       	subi	r19, 0xD0	; 208
    1bb0:	31 93       	st	Z+, r19
    1bb2:	de f6       	brtc	.-74     	; 0x1b6a <__ultoa_invert+0xe>
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	08 95       	ret
    1bb8:	46 2f       	mov	r20, r22
    1bba:	47 70       	andi	r20, 0x07	; 7
    1bbc:	40 5d       	subi	r20, 0xD0	; 208
    1bbe:	41 93       	st	Z+, r20
    1bc0:	b3 e0       	ldi	r27, 0x03	; 3
    1bc2:	0f d0       	rcall	.+30     	; 0x1be2 <__ultoa_invert+0x86>
    1bc4:	c9 f7       	brne	.-14     	; 0x1bb8 <__ultoa_invert+0x5c>
    1bc6:	f6 cf       	rjmp	.-20     	; 0x1bb4 <__ultoa_invert+0x58>
    1bc8:	46 2f       	mov	r20, r22
    1bca:	4f 70       	andi	r20, 0x0F	; 15
    1bcc:	40 5d       	subi	r20, 0xD0	; 208
    1bce:	4a 33       	cpi	r20, 0x3A	; 58
    1bd0:	18 f0       	brcs	.+6      	; 0x1bd8 <__ultoa_invert+0x7c>
    1bd2:	49 5d       	subi	r20, 0xD9	; 217
    1bd4:	31 fd       	sbrc	r19, 1
    1bd6:	40 52       	subi	r20, 0x20	; 32
    1bd8:	41 93       	st	Z+, r20
    1bda:	02 d0       	rcall	.+4      	; 0x1be0 <__ultoa_invert+0x84>
    1bdc:	a9 f7       	brne	.-22     	; 0x1bc8 <__ultoa_invert+0x6c>
    1bde:	ea cf       	rjmp	.-44     	; 0x1bb4 <__ultoa_invert+0x58>
    1be0:	b4 e0       	ldi	r27, 0x04	; 4
    1be2:	a6 95       	lsr	r26
    1be4:	97 95       	ror	r25
    1be6:	87 95       	ror	r24
    1be8:	77 95       	ror	r23
    1bea:	67 95       	ror	r22
    1bec:	ba 95       	dec	r27
    1bee:	c9 f7       	brne	.-14     	; 0x1be2 <__ultoa_invert+0x86>
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	61 05       	cpc	r22, r1
    1bf4:	71 05       	cpc	r23, r1
    1bf6:	08 95       	ret
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	0a 2e       	mov	r0, r26
    1bfe:	06 94       	lsr	r0
    1c00:	57 95       	ror	r21
    1c02:	47 95       	ror	r20
    1c04:	37 95       	ror	r19
    1c06:	27 95       	ror	r18
    1c08:	ba 95       	dec	r27
    1c0a:	c9 f7       	brne	.-14     	; 0x1bfe <__ultoa_invert+0xa2>
    1c0c:	62 0f       	add	r22, r18
    1c0e:	73 1f       	adc	r23, r19
    1c10:	84 1f       	adc	r24, r20
    1c12:	95 1f       	adc	r25, r21
    1c14:	a0 1d       	adc	r26, r0
    1c16:	08 95       	ret

00001c18 <__prologue_saves__>:
    1c18:	2f 92       	push	r2
    1c1a:	3f 92       	push	r3
    1c1c:	4f 92       	push	r4
    1c1e:	5f 92       	push	r5
    1c20:	6f 92       	push	r6
    1c22:	7f 92       	push	r7
    1c24:	8f 92       	push	r8
    1c26:	9f 92       	push	r9
    1c28:	af 92       	push	r10
    1c2a:	bf 92       	push	r11
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	ca 1b       	sub	r28, r26
    1c42:	db 0b       	sbc	r29, r27
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	09 94       	ijmp

00001c50 <__epilogue_restores__>:
    1c50:	2a 88       	ldd	r2, Y+18	; 0x12
    1c52:	39 88       	ldd	r3, Y+17	; 0x11
    1c54:	48 88       	ldd	r4, Y+16	; 0x10
    1c56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c62:	b9 84       	ldd	r11, Y+9	; 0x09
    1c64:	c8 84       	ldd	r12, Y+8	; 0x08
    1c66:	df 80       	ldd	r13, Y+7	; 0x07
    1c68:	ee 80       	ldd	r14, Y+6	; 0x06
    1c6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c70:	aa 81       	ldd	r26, Y+2	; 0x02
    1c72:	b9 81       	ldd	r27, Y+1	; 0x01
    1c74:	ce 0f       	add	r28, r30
    1c76:	d1 1d       	adc	r29, r1
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	ed 01       	movw	r28, r26
    1c84:	08 95       	ret

00001c86 <_exit>:
    1c86:	f8 94       	cli

00001c88 <__stop_program>:
    1c88:	ff cf       	rjmp	.-2      	; 0x1c88 <__stop_program>
